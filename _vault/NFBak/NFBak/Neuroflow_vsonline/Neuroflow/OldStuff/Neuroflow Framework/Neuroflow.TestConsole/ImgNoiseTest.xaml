<Activity mc:Ignorable="sap" x:Class="Neuroflow.TestConsole.ImgNoiseTest" sap:VirtualizedContainerService.HintSize="1337,2926" mva:VisualBasic.Settings="Assembly references and imported namespaces for internal implementation" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:i="clr-namespace:ImgNoise;assembly=ImgNoise" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mv="clr-namespace:Microsoft.VisualBasic;assembly=System" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:na="clr-namespace:Neuroflow.Activities;assembly=Neuroflow" xmlns:naa="clr-namespace:Neuroflow.Activities.ActivationFunctions;assembly=Neuroflow" xmlns:nal="clr-namespace:Neuroflow.Activities.LearningRules;assembly=Neuroflow" xmlns:nan="clr-namespace:Neuroflow.Activities.NeuralNetworks;assembly=Neuroflow" xmlns:nc="clr-namespace:Neuroflow.Core;assembly=Neuroflow" xmlns:ncc="clr-namespace:Neuroflow.Core.ComputationalNetworks;assembly=Neuroflow" xmlns:ncc1="clr-namespace:Neuroflow.Core.Computations;assembly=Neuroflow" xmlns:ncc2="clr-namespace:Neuroflow.Core.Collections;assembly=Neuroflow" xmlns:ncn="clr-namespace:Neuroflow.Core.NeuralNetworks;assembly=Neuroflow" xmlns:ncn1="clr-namespace:Neuroflow.Core.Networks;assembly=Neuroflow" xmlns:ncna="clr-namespace:Neuroflow.Core.NeuralNetworks.ActivationFunctions;assembly=Neuroflow" xmlns:ncnl="clr-namespace:Neuroflow.Core.NeuralNetworks.Learning;assembly=Neuroflow" xmlns:ncnla="clr-namespace:Neuroflow.Core.NeuralNetworks.Learning.Algorithms;assembly=Neuroflow" xmlns:nco="clr-namespace:Neuroflow.Core.Optimizations;assembly=Neuroflow" xmlns:ncon="clr-namespace:Neuroflow.Core.Optimizations.NeuralNetworks;assembly=Neuroflow" xmlns:nct="clr-namespace:Neuroflow.Core.Threading;assembly=Neuroflow" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System" xmlns:s2="clr-namespace:System;assembly=System.Xml" xmlns:s3="clr-namespace:System;assembly=System.Core" xmlns:s4="clr-namespace:System;assembly=System.ServiceModel" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sco1="clr-namespace:System.Collections.ObjectModel;assembly=System" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:st="clr-namespace:System.Text;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <na:ComputationContext sad:XamlDebuggerXmlReader.FileName="C:\Users\unbornchikken\Documents\Visual Studio 2010\Projects\Neuroflow Framework\Neuroflow.TestConsole\ImgNoiseTest.xaml" sap:VirtualizedContainerService.HintSize="1297,2886">
    <na:ComputationContext.Body>
      <Sequence sap:VirtualizedContainerService.HintSize="1283,2850">
        <sap:WorkflowViewStateService.ViewState>
          <scg3:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg3:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Sequence DisplayName="CreateTraining" sap:VirtualizedContainerService.HintSize="1261,1869">
          <Sequence.Variables>
            <Variable x:TypeArguments="ncn:NeuralNetwork" Name="network" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg3:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg3:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <na:Experiment sap:VirtualizedContainerService.HintSize="1239,1519">
            <na:Experiment.Branches>
              <na:ExperimentBranch DisplayName="Feed Forward" sap:VirtualizedContainerService.HintSize="593,1483" IsActive="True">
                <na:ExperimentBranch.Body>
                  <Sequence sap:VirtualizedContainerService.HintSize="571,1416">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg3:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Sequence DisplayName="Create Providers" sap:VirtualizedContainerService.HintSize="549,280">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg3:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="242,58">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[provider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[ImgNoiseInit.CreateFFProvider]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="242,58">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[validationProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[ImgNoiseInit.CreateFFValidationProvider]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="Create Network" sap:VirtualizedContainerService.HintSize="549,972">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sco:Collection(ncnl:ILearningRule)" Name="learningRules" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg3:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <nal:NewLearningRuleCollection DisplayName="LearningRuleCollection" sap:VirtualizedContainerService.HintSize="527,236" Result="[learningRules]">
                        <nal:NewLearningRuleCollection.CreateItemActivities>
                          <nal:NewNoisedWeightInitializationRule DisplayName="NoisedWeightInitialization" sap:VirtualizedContainerService.HintSize="322,36" IsInitialized="True">
                            <nal:NewNoisedWeightInitializationRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="Noise" ForProperty="True" Name="Noise" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.3</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nal:NewNoisedWeightInitializationRule.InArgumentProperties>
                          </nal:NewNoisedWeightInitializationRule>
                          <nal:NewSCGRule DisplayName="Scaled Conjugate Gradient" sap:VirtualizedContainerService.HintSize="322,125" IsInitialized="True">
                            <nal:NewSCGRule.ActivityWithResultProperties>
                              <na:ActivityWithResultValue x:Key="WeightDecay" ActivityResultType="ncnla:WeightDecay" ForProperty="True" Name="WeightDecay" PropertyType="Activity(ncnla:WeightDecay)">
                                <na:ActivityWithResultValue.Activity>
                                  <nal:NewWeightDecay DisplayName="WeightDecay" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                    <nal:NewWeightDecay.InArgumentProperties>
                                      <na:InArgumentValue x:Key="Cutoff" ForProperty="True" Name="Cutoff" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">2</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="Factor" ForProperty="True" Name="Factor" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">-1E-05</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nal:NewWeightDecay.InArgumentProperties>
                                  </nal:NewWeightDecay>
                                </na:ActivityWithResultValue.Activity>
                              </na:ActivityWithResultValue>
                            </nal:NewSCGRule.ActivityWithResultProperties>
                            <nal:NewSCGRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nal:NewSCGRule.InArgumentProperties>
                          </nal:NewSCGRule>
                        </nal:NewLearningRuleCollection.CreateItemActivities>
                      </nal:NewLearningRuleCollection>
                      <nan:NewWiredNeuralNetwork DisplayName="Wired Neural Network" sap:VirtualizedContainerService.HintSize="527,572" IsInitialized="True" Result="[network]">
                        <nan:NewWiredNeuralNetwork.ActivityWithResultProperties>
                          <na:ActivityWithResultValue x:Key="nodeFactory" ActivityResultType="nc:IFactory(ncc:OperationNode(x:Double))" ForProperty="False" Name="nodeFactory" PropertyType="Activity(nc:IFactory(ncc:OperationNode(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewActivationNeuron DisplayName="ActivationNeuron" sap:VirtualizedContainerService.HintSize="353,163" IsInitialized="True">
                                <nan:NewActivationNeuron.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="activationFunction" ActivityResultType="ncna:IActivationFunction" ForProperty="False" Name="activationFunction" PropertyType="Activity(ncna:IActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <naa:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                        <naa:NewSigmoidActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="Alpha" ForProperty="True" Name="Alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </naa:NewSigmoidActivationFunction.InArgumentProperties>
                                      </naa:NewSigmoidActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewActivationNeuron.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewActivationNeuron>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="collectorNodeFactory" ActivityResultType="nc:IFactory(ncc:OperationNode(x:Double))" ForProperty="False" Name="collectorNodeFactory" PropertyType="Activity(nc:IFactory(ncc:OperationNode(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewActivationNeuron DisplayName="ActivationNeuron" sap:VirtualizedContainerService.HintSize="353,163" IsInitialized="True">
                                <nan:NewActivationNeuron.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="activationFunction" ActivityResultType="ncna:IActivationFunction" ForProperty="False" Name="activationFunction" PropertyType="Activity(ncna:IActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <naa:NewLinearActivationFunction DisplayName="LinearActivationFunction" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                        <naa:NewLinearActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="Alpha" ForProperty="True" Name="Alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </naa:NewLinearActivationFunction.InArgumentProperties>
                                      </naa:NewLinearActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewActivationNeuron.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewActivationNeuron>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="connectionFactory" ActivityResultType="nc:IFactory(ncc:ComputationConnection(x:Double))" ForProperty="False" Name="connectionFactory" PropertyType="Activity(nc:IFactory(ncc:ComputationConnection(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewSynapse DisplayName="Synapse" sap:VirtualizedContainerService.HintSize="353,97" IsInitialized="True">
                                <nan:NewSynapse.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewSynapse.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewSynapse>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                        </nan:NewWiredNeuralNetwork.ActivityWithResultProperties>
                        <nan:NewWiredNeuralNetwork.InArgumentProperties>
                          <na:InArgumentValue x:Key="inputInterfaceLength" ForProperty="False" Name="inputInterfaceLength" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[ImgNoiseInit.FFInputInterfaceLenght]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="outputInterfaceLength" ForProperty="False" Name="outputInterfaceLength" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">1</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="nodeCount" ForProperty="False" Name="nodeCount" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[ImgNoiseInit.FFNeuronCount]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="recurrent" ForProperty="False" Name="recurrent" PropertyType="InArgument(x:Boolean)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                        </nan:NewWiredNeuralNetwork.InArgumentProperties>
                      </nan:NewWiredNeuralNetwork>
                    </Sequence>
                  </Sequence>
                </na:ExperimentBranch.Body>
              </na:ExperimentBranch>
              <na:ExperimentBranch DisplayName="Recurrent" sap:VirtualizedContainerService.HintSize="593,1483" IsActive="False">
                <na:ExperimentBranch.Body>
                  <Sequence sap:VirtualizedContainerService.HintSize="571,1416">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg3:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Sequence DisplayName="Create Providers" sap:VirtualizedContainerService.HintSize="549,280">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg3:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="242,58">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[provider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[ImgNoiseInit.CreateRProvider]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="242,58">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[validationProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider">[ImgNoiseInit.CreateRValidationProvider]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="Create Network" sap:VirtualizedContainerService.HintSize="549,972">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sco:Collection(ncnl:ILearningRule)" Name="learningRules" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg3:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <nal:NewLearningRuleCollection DisplayName="LearningRuleCollection" sap:VirtualizedContainerService.HintSize="527,236" Result="[learningRules]">
                        <nal:NewLearningRuleCollection.CreateItemActivities>
                          <nal:NewNoisedWeightInitializationRule DisplayName="NoisedWeightInitialization" sap:VirtualizedContainerService.HintSize="322,36" IsInitialized="True">
                            <nal:NewNoisedWeightInitializationRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="Noise" ForProperty="True" Name="Noise" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.3</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nal:NewNoisedWeightInitializationRule.InArgumentProperties>
                          </nal:NewNoisedWeightInitializationRule>
                          <nal:NewSCGRule DisplayName="Scaled Conjugate Gradient" sap:VirtualizedContainerService.HintSize="322,125" IsInitialized="True">
                            <nal:NewSCGRule.ActivityWithResultProperties>
                              <na:ActivityWithResultValue x:Key="WeightDecay" ActivityResultType="ncnla:WeightDecay" ForProperty="True" Name="WeightDecay" PropertyType="Activity(ncnla:WeightDecay)">
                                <na:ActivityWithResultValue.Activity>
                                  <nal:NewWeightDecay DisplayName="WeightDecay" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                    <nal:NewWeightDecay.InArgumentProperties>
                                      <na:InArgumentValue x:Key="Cutoff" ForProperty="True" Name="Cutoff" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">2</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="Factor" ForProperty="True" Name="Factor" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">-1E-05</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nal:NewWeightDecay.InArgumentProperties>
                                  </nal:NewWeightDecay>
                                </na:ActivityWithResultValue.Activity>
                              </na:ActivityWithResultValue>
                            </nal:NewSCGRule.ActivityWithResultProperties>
                            <nal:NewSCGRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nal:NewSCGRule.InArgumentProperties>
                          </nal:NewSCGRule>
                        </nal:NewLearningRuleCollection.CreateItemActivities>
                      </nal:NewLearningRuleCollection>
                      <nan:NewWiredNeuralNetwork DisplayName="Wired Neural Network" sap:VirtualizedContainerService.HintSize="527,572" IsInitialized="True" Result="[network]">
                        <nan:NewWiredNeuralNetwork.ActivityWithResultProperties>
                          <na:ActivityWithResultValue x:Key="nodeFactory" ActivityResultType="nc:IFactory(ncc:OperationNode(x:Double))" ForProperty="False" Name="nodeFactory" PropertyType="Activity(nc:IFactory(ncc:OperationNode(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewActivationNeuron DisplayName="ActivationNeuron" sap:VirtualizedContainerService.HintSize="353,163" IsInitialized="True">
                                <nan:NewActivationNeuron.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="activationFunction" ActivityResultType="ncna:IActivationFunction" ForProperty="False" Name="activationFunction" PropertyType="Activity(ncna:IActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <naa:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                        <naa:NewSigmoidActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="Alpha" ForProperty="True" Name="Alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </naa:NewSigmoidActivationFunction.InArgumentProperties>
                                      </naa:NewSigmoidActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewActivationNeuron.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewActivationNeuron>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="collectorNodeFactory" ActivityResultType="nc:IFactory(ncc:OperationNode(x:Double))" ForProperty="False" Name="collectorNodeFactory" PropertyType="Activity(nc:IFactory(ncc:OperationNode(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewActivationNeuron DisplayName="ActivationNeuron" sap:VirtualizedContainerService.HintSize="353,163" IsInitialized="True">
                                <nan:NewActivationNeuron.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="activationFunction" ActivityResultType="ncna:IActivationFunction" ForProperty="False" Name="activationFunction" PropertyType="Activity(ncna:IActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <naa:NewLinearActivationFunction DisplayName="LinearActivationFunction" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                                        <naa:NewLinearActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="Alpha" ForProperty="True" Name="Alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </naa:NewLinearActivationFunction.InArgumentProperties>
                                      </naa:NewLinearActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewActivationNeuron.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewActivationNeuron>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="connectionFactory" ActivityResultType="nc:IFactory(ncc:ComputationConnection(x:Double))" ForProperty="False" Name="connectionFactory" PropertyType="Activity(nc:IFactory(ncc:ComputationConnection(x:Double)))">
                            <na:ActivityWithResultValue.Activity>
                              <nan:NewSynapse DisplayName="Synapse" sap:VirtualizedContainerService.HintSize="353,97" IsInitialized="True">
                                <nan:NewSynapse.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(ncnl:ILearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(ncnl:ILearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(ncnl:ILearningRule)" ExpressionText="learningRules" sap:VirtualizedContainerService.HintSize="289,55" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nan:NewSynapse.ActivityWithResultProperties>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg3:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </nan:NewSynapse>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                        </nan:NewWiredNeuralNetwork.ActivityWithResultProperties>
                        <nan:NewWiredNeuralNetwork.InArgumentProperties>
                          <na:InArgumentValue x:Key="inputInterfaceLength" ForProperty="False" Name="inputInterfaceLength" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[ImgNoiseInit.RInputInterfaceLenght]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="outputInterfaceLength" ForProperty="False" Name="outputInterfaceLength" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">1</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="nodeCount" ForProperty="False" Name="nodeCount" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[ImgNoiseInit.RNeuronCount]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="recurrent" ForProperty="False" Name="recurrent" PropertyType="InArgument(x:Boolean)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                        </nan:NewWiredNeuralNetwork.InArgumentProperties>
                      </nan:NewWiredNeuralNetwork>
                    </Sequence>
                  </Sequence>
                </na:ExperimentBranch.Body>
              </na:ExperimentBranch>
            </na:Experiment.Branches>
            <sap:WorkflowViewStateService.ViewState>
              <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg3:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </na:Experiment>
          <nan:NewUnorderedTraining DisplayName="UnorderedTraining" sap:VirtualizedContainerService.HintSize="1239,186" IsInitialized="True" Result="[training]">
            <nan:NewUnorderedTraining.ActivityWithResultProperties>
              <na:ActivityWithResultValue x:Key="network" ActivityResultType="ncn:NeuralNetwork" ForProperty="False" Name="network" PropertyType="Activity(ncn:NeuralNetwork)">
                <na:ActivityWithResultValue.Activity>
                  <mva:VisualBasicValue x:TypeArguments="ncn:NeuralNetwork" ExpressionText="network" sap:VirtualizedContainerService.HintSize="289,55" />
                </na:ActivityWithResultValue.Activity>
              </na:ActivityWithResultValue>
              <na:ActivityWithResultValue x:Key="repeatPars" ActivityResultType="nco:IterationRepeatPars" ForProperty="False" Name="repeatPars" PropertyType="Activity(nco:IterationRepeatPars)">
                <na:ActivityWithResultValue.Activity>
                  <nan:NewIterationRepeatPars DisplayName="IterationRepeatPars" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                    <nan:NewIterationRepeatPars.InArgumentProperties>
                      <na:InArgumentValue x:Key="minIterations" ForProperty="False" Name="minIterations" PropertyType="InArgument(x:Int32)">
                        <na:InArgumentValue.InArgument>
                          <InArgument x:TypeArguments="x:Int32">5</InArgument>
                        </na:InArgumentValue.InArgument>
                      </na:InArgumentValue>
                      <na:InArgumentValue x:Key="maxIterations" ForProperty="False" Name="maxIterations" PropertyType="InArgument(x:Int32)">
                        <na:InArgumentValue.InArgument>
                          <InArgument x:TypeArguments="x:Int32">10</InArgument>
                        </na:InArgumentValue.InArgument>
                      </na:InArgumentValue>
                    </nan:NewIterationRepeatPars.InArgumentProperties>
                  </nan:NewIterationRepeatPars>
                </na:ActivityWithResultValue.Activity>
              </na:ActivityWithResultValue>
            </nan:NewUnorderedTraining.ActivityWithResultProperties>
            <sap:WorkflowViewStateService.ViewState>
              <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg3:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </nan:NewUnorderedTraining>
        </Sequence>
        <nan:TrainingLoop Condition="[validationResult.AverageError &gt; 0.0001]" sap:VirtualizedContainerService.HintSize="1261,817">
          <nan:TrainingLoop.Body>
            <ActivityAction x:TypeArguments="x:Int32">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:Int32" Name="iterationNo" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Training Iteration Sequence" sap:VirtualizedContainerService.HintSize="405,671">
                <sap:WorkflowViewStateService.ViewState>
                  <scg3:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg3:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <nan:TrainingIteration DisplayName="Training Iteration" sap:VirtualizedContainerService.HintSize="383,203" Result="[result]" Training="[training]">
                  <nan:TrainingIteration.GetNextBatch>
                    <ActivityFunc x:TypeArguments="ncon:NeuralBatch">
                      <ActivityFunc.Result>
                        <DelegateOutArgument x:TypeArguments="ncon:NeuralBatch" Name="batchResult" />
                      </ActivityFunc.Result>
                      <nan:UnorderedProviderBatcher BatchSize="200" DisplayName="Unordered Provider Batcher" sap:VirtualizedContainerService.HintSize="343,102" LastResult="[result]" Provider="[provider]" ReinitializationFrequency="500" Result="[batchResult]" UseCache="True">
                        <nan:UnorderedProviderBatcher.BatchingStrategy>
                          <nan:NewGaussianBatchingStrategyFactory DisplayName="GaussianBatchingStrategy" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True">
                            <nan:NewGaussianBatchingStrategyFactory.InArgumentProperties>
                              <na:InArgumentValue x:Key="stdDev" ForProperty="False" Name="stdDev" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.5</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nan:NewGaussianBatchingStrategyFactory.InArgumentProperties>
                          </nan:NewGaussianBatchingStrategyFactory>
                        </nan:UnorderedProviderBatcher.BatchingStrategy>
                      </nan:UnorderedProviderBatcher>
                    </ActivityFunc>
                  </nan:TrainingIteration.GetNextBatch>
                </nan:TrainingIteration>
                <nan:ValidationIteration DisplayName="Validation Iteration" EveryNthIteration="1" sap:VirtualizedContainerService.HintSize="383,203" Result="[validationResult]" Training="[training]">
                  <nan:ValidationIteration.GetNextBatch>
                    <ActivityFunc x:TypeArguments="ncon:NeuralBatch">
                      <ActivityFunc.Result>
                        <DelegateOutArgument x:TypeArguments="ncon:NeuralBatch" Name="batchResult" />
                      </ActivityFunc.Result>
                      <nan:UnorderedProviderBatcher LastResult="{x:Null}" BatchSize="50" DisplayName="Unordered Provider Batcher" sap:VirtualizedContainerService.HintSize="343,102" Provider="[validationProvider]" ReinitializationFrequency="500" Result="[batchResult]" UseCache="True">
                        <nan:UnorderedProviderBatcher.BatchingStrategy>
                          <nan:NewMonteCarloBatchingStrategyFactory DisplayName="MonteCarloBatchingStrategy" sap:VirtualizedContainerService.HintSize="200,36" IsInitialized="True" />
                        </nan:UnorderedProviderBatcher.BatchingStrategy>
                      </nan:UnorderedProviderBatcher>
                    </ActivityFunc>
                  </nan:ValidationIteration.GetNextBatch>
                </nan:ValidationIteration>
                <WriteLine sap:VirtualizedContainerService.HintSize="383,61" Text="[iterationNo.ToString(&quot;0000&quot;) + &quot; - Training Result: &quot; + result.AverageError.ToString(&quot;0.000000&quot;) + &quot; Validation Result: &quot; + validationResult.AverageError.ToString(&quot;0.000000&quot;)]" />
              </Sequence>
            </ActivityAction>
          </nan:TrainingLoop.Body>
          <nan:TrainingLoop.Variables>
            <Variable x:TypeArguments="nco:BatchExecutionResult" Name="result" />
            <Variable x:TypeArguments="nco:BatchExecutionResult" Name="validationResult" />
          </nan:TrainingLoop.Variables>
        </nan:TrainingLoop>
      </Sequence>
    </na:ComputationContext.Body>
    <na:ComputationContext.Variables>
      <Variable x:TypeArguments="ncnl:UnorderedTraining" Name="training" />
      <Variable x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider" Name="provider" />
      <Variable x:TypeArguments="ncon:IUnorderedNeuralVectorsProvider" Name="validationProvider" />
    </na:ComputationContext.Variables>
  </na:ComputationContext>
</Activity>