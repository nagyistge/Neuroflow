<Activity mc:Ignorable="sap sap2010 sads" x:Class="ImgNoiseTest" sap2010:WorkflowViewState.IdRef="ImgNoiseTest_1"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:na="clr-namespace:Neuroflow.Activities;assembly=Neuroflow.Activities"
 xmlns:nann="clr-namespace:Neuroflow.Activities.Networks.Neural;assembly=Neuroflow.Activities"
 xmlns:nannl="clr-namespace:Neuroflow.Activities.Networks.Neural.Learning;assembly=Neuroflow.Activities"
 xmlns:nannm="clr-namespace:Neuroflow.Activities.Networks.Neural.Managed;assembly=Neuroflow.Activities"
 xmlns:navb="clr-namespace:Neuroflow.Activities.Vectors.BatchingStrategies;assembly=Neuroflow.Activities"
 xmlns:ncv="clr-namespace:Neuroflow.Core.Vectors;assembly=Neuroflow.Core"
 xmlns:nnn="clr-namespace:Neuroflow.Networks.Neural;assembly=Neuroflow.Networks"
 xmlns:nnnl="clr-namespace:Neuroflow.Networks.Neural.Learning;assembly=Neuroflow.Networks"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities</x:String>
      <x:String>ImgNoise</x:String>
      <x:String>ImgNoise.Properties</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>Neuroflow.Activities</x:String>
      <x:String>Neuroflow.Activities.Networks.Neural</x:String>
      <x:String>Neuroflow.Activities.Networks.Neural.Managed</x:String>
      <x:String>Neuroflow.Activities.Networks.Neural.Learning</x:String>
      <x:String>Neuroflow.Activities.Vectors</x:String>
      <x:String>Neuroflow.Activities.Vectors.BatchingStrategies</x:String>
      <x:String>Neuroflow.Core</x:String>
      <x:String>Neuroflow.Core.Computations</x:String>
      <x:String>Neuroflow.Core.Vectors</x:String>
      <x:String>Neuroflow.Networks</x:String>
      <x:String>Neuroflow.Networks.Neural</x:String>
      <x:String>Neuroflow.Networks.Neural.Learning</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities.Debugger</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Neuroflow.Core.Algorithms</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Activities.Presentation</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Neuroflow.Activities.Design</AssemblyReference>
      <AssemblyReference>Neuroflow.Activities</AssemblyReference>
      <AssemblyReference>Neuroflow.Core</AssemblyReference>
      <AssemblyReference>Neuroflow.Networks</AssemblyReference>
      <AssemblyReference>ImgNoise</AssemblyReference>
      <AssemblyReference>PussyDetector</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>WFTestConsole</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <na:ComputationContext sap2010:WorkflowViewState.IdRef="ComputationContext_1">
    <na:ComputationContext.Body>
      <Sequence DisplayName="Main" sap2010:WorkflowViewState.IdRef="Sequence_9">
        <Sequence DisplayName="Create Training" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <na:Experiment sap2010:WorkflowViewState.IdRef="Experiment_1">
            <na:Experiment.Branches>
              <na:ExperimentBranch DisplayName="FF" sap2010:WorkflowViewState.IdRef="ExperimentBranch_1" IsActive="True">
                <na:ExperimentBranch.Body>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
                    <Sequence DisplayName="Create Providers" sap2010:WorkflowViewState.IdRef="Sequence_1">
                      <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
                        <Assign.To>
                          <OutArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[trainingProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[ImgNoiseInit.CreateFFProvider()]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
                        <Assign.To>
                          <OutArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[validationProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[ImgNoiseInit.CreateFFValidationProvider()]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="Create Network" sap2010:WorkflowViewState.IdRef="Sequence_2">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sco:Collection(nnnl:LearningRule)" Name="rules" />
                      </Sequence.Variables>
                      <nannl:NewLearningRuleCollection DisplayName="Create Rules" sap2010:WorkflowViewState.IdRef="NewLearningRuleCollection_1" Result="[rules]">
                        <nannl:NewLearningRuleCollection.CreateItemActivities>
                          <nannl:NewNoisedWeightInitializationRule DisplayName="NoisedWeightInitialization" sap2010:WorkflowViewState.IdRef="NewNoisedWeightInitializationRule_1" IsInitialized="True">
                            <nannl:NewNoisedWeightInitializationRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="Noise" ForProperty="True" Name="Noise" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.3</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nannl:NewNoisedWeightInitializationRule.InArgumentProperties>
                          </nannl:NewNoisedWeightInitializationRule>
                          <nannl:NewSignChangesRule DisplayName="SignChanges" sap2010:WorkflowViewState.IdRef="NewSignChangesRule_1" IsInitialized="True">
                            <nannl:NewSignChangesRule.ActivityWithResultProperties>
                              <na:ActivityWithResultValue x:Key="WeightDecay" ActivityResultType="nnnl:WeightDecay" ForProperty="True" Name="WeightDecay" PropertyType="Activity(nnnl:WeightDecay)">
                                <na:ActivityWithResultValue.Activity>
                                  <nannl:NewWeightDecay DisplayName="WeightDecay" sap2010:WorkflowViewState.IdRef="NewWeightDecay_1" IsInitialized="True">
                                    <nannl:NewWeightDecay.InArgumentProperties>
                                      <na:InArgumentValue x:Key="Cutoff" ForProperty="True" Name="Cutoff" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">2</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="Factor" ForProperty="True" Name="Factor" PropertyType="InArgument(x:Double)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Double">-0.0001</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                      <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nannl:NewWeightDecay.InArgumentProperties>
                                  </nannl:NewWeightDecay>
                                </na:ActivityWithResultValue.Activity>
                              </na:ActivityWithResultValue>
                            </nannl:NewSignChangesRule.ActivityWithResultProperties>
                            <nannl:NewSignChangesRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="MinStepSize" ForProperty="True" Name="MinStepSize" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">1E-05</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="MaxStepSize" ForProperty="True" Name="MaxStepSize" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.001</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="StochasticAdaptiveStateUpdate" ForProperty="True" Name="StochasticAdaptiveStateUpdate" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="Momentum" ForProperty="True" Name="Momentum" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.25</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="UseSmoothing" ForProperty="True" Name="UseSmoothing" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="Mode" ForProperty="True" Name="Mode" PropertyType="InArgument(nnnl:LearningMode)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="nnnl:LearningMode">[LearningMode.Stochastic]</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nannl:NewSignChangesRule.InArgumentProperties>
                          </nannl:NewSignChangesRule>
                        </nannl:NewLearningRuleCollection.CreateItemActivities>
                      </nannl:NewLearningRuleCollection>
                      <nann:NewStandardMultilayerNeuralNetwork DisplayName="Standard Multilayer NN" sap2010:WorkflowViewState.IdRef="NewStandardMultilayerNeuralNetwork_1" IsInitialized="True" Result="[network]">
                        <nann:NewStandardMultilayerNeuralNetwork.ActivityWithResultProperties>
                          <na:ActivityWithResultValue x:Key="HiddenLayers" ActivityResultType="sco:Collection(nnn:Layer)" ForProperty="True" Name="HiddenLayers" PropertyType="Activity(sco:Collection(nnn:Layer))">
                            <na:ActivityWithResultValue.Activity>
                              <nann:NewLayerCollection DisplayName="LayerCollection" sap2010:WorkflowViewState.IdRef="NewLayerCollection_1">
                                <nann:NewLayerCollection.CreateItemActivities>
                                  <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_1" IsInitialized="True">
                                    <nann:NewActivationLayer.ActivityWithResultProperties>
                                      <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                        <na:ActivityWithResultValue.Activity>
                                          <nann:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap2010:WorkflowViewState.IdRef="NewSigmoidActivationFunction_1" IsInitialized="True">
                                            <nann:NewSigmoidActivationFunction.InArgumentProperties>
                                              <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                                <na:InArgumentValue.InArgument>
                                                  <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                                </na:InArgumentValue.InArgument>
                                              </na:InArgumentValue>
                                            </nann:NewSigmoidActivationFunction.InArgumentProperties>
                                          </nann:NewSigmoidActivationFunction>
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                      <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                        <na:ActivityWithResultValue.Activity>
                                          <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_1" />
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                    </nann:NewActivationLayer.ActivityWithResultProperties>
                                    <nann:NewActivationLayer.InArgumentProperties>
                                      <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Int32">20</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nann:NewActivationLayer.InArgumentProperties>
                                  </nann:NewActivationLayer>
                                  <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_2" IsInitialized="True">
                                    <nann:NewActivationLayer.ActivityWithResultProperties>
                                      <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                        <na:ActivityWithResultValue.Activity>
                                          <nann:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap2010:WorkflowViewState.IdRef="NewSigmoidActivationFunction_2" IsInitialized="True">
                                            <nann:NewSigmoidActivationFunction.InArgumentProperties>
                                              <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                                <na:InArgumentValue.InArgument>
                                                  <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                                </na:InArgumentValue.InArgument>
                                              </na:InArgumentValue>
                                            </nann:NewSigmoidActivationFunction.InArgumentProperties>
                                          </nann:NewSigmoidActivationFunction>
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                      <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                        <na:ActivityWithResultValue.Activity>
                                          <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_2" />
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                    </nann:NewActivationLayer.ActivityWithResultProperties>
                                    <nann:NewActivationLayer.InArgumentProperties>
                                      <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Int32">10</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nann:NewActivationLayer.InArgumentProperties>
                                  </nann:NewActivationLayer>
                                </nann:NewLayerCollection.CreateItemActivities>
                              </nann:NewLayerCollection>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="OutputLayer" ActivityResultType="nnn:Layer" ForProperty="True" Name="OutputLayer" PropertyType="Activity(nnn:Layer)">
                            <na:ActivityWithResultValue.Activity>
                              <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_3" IsInitialized="True">
                                <nann:NewActivationLayer.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <nann:NewLinearActivationFunction DisplayName="LinearActivationFunction" sap2010:WorkflowViewState.IdRef="NewLinearActivationFunction_1" IsInitialized="True">
                                        <nann:NewLinearActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </nann:NewLinearActivationFunction.InArgumentProperties>
                                      </nann:NewLinearActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_3" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nann:NewActivationLayer.ActivityWithResultProperties>
                                <nann:NewActivationLayer.InArgumentProperties>
                                  <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Int32">[trainingProvider.OutputInterfaceLength]</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                </nann:NewActivationLayer.InArgumentProperties>
                              </nann:NewActivationLayer>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="InitParameters" ActivityResultType="nnn:NNInitParameters" ForProperty="True" Name="InitParameters" PropertyType="Activity(nnn:NNInitParameters)">
                            <na:ActivityWithResultValue.Activity>
                              <nannm:NewManagedNNInitParameters DisplayName="ManagedNNInitParameters" sap2010:WorkflowViewState.IdRef="NewManagedNNInitParameters_1" IsInitialized="True">
                                <nannm:NewManagedNNInitParameters.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue Activity="{x:Null}" x:Key="RecurrentOptions" ActivityResultType="nnn:RecurrentOptions" ForProperty="True" Name="RecurrentOptions" PropertyType="Activity(nnn:RecurrentOptions)" />
                                </nannm:NewManagedNNInitParameters.ActivityWithResultProperties>
                                <nannm:NewManagedNNInitParameters.InArgumentProperties>
                                  <na:InArgumentValue x:Key="RunParallel" ForProperty="True" Name="RunParallel" PropertyType="InArgument(x:Boolean)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                </nannm:NewManagedNNInitParameters.InArgumentProperties>
                              </nannm:NewManagedNNInitParameters>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                        </nann:NewStandardMultilayerNeuralNetwork.ActivityWithResultProperties>
                        <nann:NewStandardMultilayerNeuralNetwork.InArgumentProperties>
                          <na:InArgumentValue x:Key="InputSize" ForProperty="True" Name="InputSize" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[trainingProvider.InputInterfaceLength]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                        </nann:NewStandardMultilayerNeuralNetwork.InArgumentProperties>
                      </nann:NewStandardMultilayerNeuralNetwork>
                    </Sequence>
                  </Sequence>
                </na:ExperimentBranch.Body>
              </na:ExperimentBranch>
              <na:ExperimentBranch DisplayName="Recurrent" sap2010:WorkflowViewState.IdRef="ExperimentBranch_2" IsActive="False">
                <na:ExperimentBranch.Body>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <Sequence DisplayName="Create Providers" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
                        <Assign.To>
                          <OutArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[trainingProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[ImgNoiseInit.CreateRProvider()]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
                        <Assign.To>
                          <OutArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[validationProvider]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider">[ImgNoiseInit.CreateRValidationProvider()]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="Create Network" sap2010:WorkflowViewState.IdRef="Sequence_5">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sco:Collection(nnnl:LearningRule)" Name="rules" />
                      </Sequence.Variables>
                      <nannl:NewSignChangesRule DisplayName="SignChanges" sap2010:WorkflowViewState.IdRef="NewSignChangesRule_2" IsInitialized="True">
                        <nannl:NewSignChangesRule.ActivityWithResultProperties>
                          <na:ActivityWithResultValue x:Key="WeightDecay" ActivityResultType="nnnl:WeightDecay" ForProperty="True" Name="WeightDecay" PropertyType="Activity(nnnl:WeightDecay)">
                            <na:ActivityWithResultValue.Activity>
                              <nannl:NewWeightDecay DisplayName="WeightDecay" sap2010:WorkflowViewState.IdRef="NewWeightDecay_2" IsInitialized="True">
                                <nannl:NewWeightDecay.InArgumentProperties>
                                  <na:InArgumentValue x:Key="Cutoff" ForProperty="True" Name="Cutoff" PropertyType="InArgument(x:Double)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Double">2</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                  <na:InArgumentValue x:Key="Factor" ForProperty="True" Name="Factor" PropertyType="InArgument(x:Double)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Double">-0.0001</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                  <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                </nannl:NewWeightDecay.InArgumentProperties>
                              </nannl:NewWeightDecay>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                        </nannl:NewSignChangesRule.ActivityWithResultProperties>
                        <nannl:NewSignChangesRule.InArgumentProperties>
                          <na:InArgumentValue x:Key="MinStepSize" ForProperty="True" Name="MinStepSize" PropertyType="InArgument(x:Double)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Double">1E-07</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="MaxStepSize" ForProperty="True" Name="MaxStepSize" PropertyType="InArgument(x:Double)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Double">0.001</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="StochasticAdaptiveStateUpdate" ForProperty="True" Name="StochasticAdaptiveStateUpdate" PropertyType="InArgument(x:Boolean)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="Momentum" ForProperty="True" Name="Momentum" PropertyType="InArgument(x:Double)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Double">0.25</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="UseSmoothing" ForProperty="True" Name="UseSmoothing" PropertyType="InArgument(x:Boolean)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="Mode" ForProperty="True" Name="Mode" PropertyType="InArgument(nnnl:LearningMode)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="nnnl:LearningMode">[LearningMode.Stochastic]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                          <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">0</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                        </nannl:NewSignChangesRule.InArgumentProperties>
                      </nannl:NewSignChangesRule>
                      <nannl:NewLearningRuleCollection DisplayName="Create Rules" sap2010:WorkflowViewState.IdRef="NewLearningRuleCollection_2" Result="[rules]">
                        <nannl:NewLearningRuleCollection.CreateItemActivities>
                          <nannl:NewNoisedWeightInitializationRule DisplayName="NoisedWeightInitialization" sap2010:WorkflowViewState.IdRef="NewNoisedWeightInitializationRule_2" IsInitialized="True">
                            <nannl:NewNoisedWeightInitializationRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="Noise" ForProperty="True" Name="Noise" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.3</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nannl:NewNoisedWeightInitializationRule.InArgumentProperties>
                          </nannl:NewNoisedWeightInitializationRule>
                          <nannl:NewGaussianHistoryRule DisplayName="GaussianHistory" sap2010:WorkflowViewState.IdRef="NewGaussianHistoryRule_2" IsInitialized="True">
                            <nannl:NewGaussianHistoryRule.ActivityWithResultProperties>
                              <na:ActivityWithResultValue Activity="{x:Null}" x:Key="WeightDecay" ActivityResultType="nnnl:WeightDecay" ForProperty="True" Name="WeightDecay" PropertyType="Activity(nnnl:WeightDecay)" />
                            </nannl:NewGaussianHistoryRule.ActivityWithResultProperties>
                            <nannl:NewGaussianHistoryRule.InArgumentProperties>
                              <na:InArgumentValue x:Key="Range" ForProperty="True" Name="Range" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">1</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="Size" ForProperty="True" Name="Size" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">30</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="Scale" ForProperty="True" Name="Scale" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.5</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="IsEnabled" ForProperty="True" Name="IsEnabled" PropertyType="InArgument(x:Boolean)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                              <na:InArgumentValue x:Key="GroupID" ForProperty="True" Name="GroupID" PropertyType="InArgument(x:Int32)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </nannl:NewGaussianHistoryRule.InArgumentProperties>
                          </nannl:NewGaussianHistoryRule>
                        </nannl:NewLearningRuleCollection.CreateItemActivities>
                      </nannl:NewLearningRuleCollection>
                      <nann:NewStandardMultilayerNeuralNetwork DisplayName="Standard Multilayer NN" sap2010:WorkflowViewState.IdRef="NewStandardMultilayerNeuralNetwork_2" IsInitialized="True" Result="[network]">
                        <nann:NewStandardMultilayerNeuralNetwork.ActivityWithResultProperties>
                          <na:ActivityWithResultValue x:Key="HiddenLayers" ActivityResultType="sco:Collection(nnn:Layer)" ForProperty="True" Name="HiddenLayers" PropertyType="Activity(sco:Collection(nnn:Layer))">
                            <na:ActivityWithResultValue.Activity>
                              <nann:NewLayerCollection DisplayName="LayerCollection" sap2010:WorkflowViewState.IdRef="NewLayerCollection_2">
                                <nann:NewLayerCollection.CreateItemActivities>
                                  <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_4" IsInitialized="True">
                                    <nann:NewActivationLayer.ActivityWithResultProperties>
                                      <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                        <na:ActivityWithResultValue.Activity>
                                          <nann:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap2010:WorkflowViewState.IdRef="NewSigmoidActivationFunction_3" IsInitialized="True">
                                            <nann:NewSigmoidActivationFunction.InArgumentProperties>
                                              <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                                <na:InArgumentValue.InArgument>
                                                  <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                                </na:InArgumentValue.InArgument>
                                              </na:InArgumentValue>
                                            </nann:NewSigmoidActivationFunction.InArgumentProperties>
                                          </nann:NewSigmoidActivationFunction>
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                      <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                        <na:ActivityWithResultValue.Activity>
                                          <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_4" />
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                    </nann:NewActivationLayer.ActivityWithResultProperties>
                                    <nann:NewActivationLayer.InArgumentProperties>
                                      <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Int32">16</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nann:NewActivationLayer.InArgumentProperties>
                                  </nann:NewActivationLayer>
                                  <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_5" IsInitialized="True">
                                    <nann:NewActivationLayer.ActivityWithResultProperties>
                                      <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                        <na:ActivityWithResultValue.Activity>
                                          <nann:NewSigmoidActivationFunction DisplayName="SigmoidActivationFunction" sap2010:WorkflowViewState.IdRef="NewSigmoidActivationFunction_4" IsInitialized="True">
                                            <nann:NewSigmoidActivationFunction.InArgumentProperties>
                                              <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                                <na:InArgumentValue.InArgument>
                                                  <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                                </na:InArgumentValue.InArgument>
                                              </na:InArgumentValue>
                                            </nann:NewSigmoidActivationFunction.InArgumentProperties>
                                          </nann:NewSigmoidActivationFunction>
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                      <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                        <na:ActivityWithResultValue.Activity>
                                          <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_5" />
                                        </na:ActivityWithResultValue.Activity>
                                      </na:ActivityWithResultValue>
                                    </nann:NewActivationLayer.ActivityWithResultProperties>
                                    <nann:NewActivationLayer.InArgumentProperties>
                                      <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                        <na:InArgumentValue.InArgument>
                                          <InArgument x:TypeArguments="x:Int32">8</InArgument>
                                        </na:InArgumentValue.InArgument>
                                      </na:InArgumentValue>
                                    </nann:NewActivationLayer.InArgumentProperties>
                                  </nann:NewActivationLayer>
                                </nann:NewLayerCollection.CreateItemActivities>
                              </nann:NewLayerCollection>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="OutputLayer" ActivityResultType="nnn:Layer" ForProperty="True" Name="OutputLayer" PropertyType="Activity(nnn:Layer)">
                            <na:ActivityWithResultValue.Activity>
                              <nann:NewActivationLayer DisplayName="ActivationLayer" sap2010:WorkflowViewState.IdRef="NewActivationLayer_6" IsInitialized="True">
                                <nann:NewActivationLayer.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="function" ActivityResultType="nnn:ActivationFunction" ForProperty="False" Name="function" PropertyType="Activity(nnn:ActivationFunction)">
                                    <na:ActivityWithResultValue.Activity>
                                      <nann:NewLinearActivationFunction DisplayName="LinearActivationFunction" sap2010:WorkflowViewState.IdRef="NewLinearActivationFunction_2" IsInitialized="True">
                                        <nann:NewLinearActivationFunction.InArgumentProperties>
                                          <na:InArgumentValue x:Key="alpha" ForProperty="False" Name="alpha" PropertyType="InArgument(x:Double)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Double">1.05</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </nann:NewLinearActivationFunction.InArgumentProperties>
                                      </nann:NewLinearActivationFunction>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                  <na:ActivityWithResultValue x:Key="learningRules" ActivityResultType="sco:Collection(nnnl:LearningRule)" ForProperty="False" Name="learningRules" PropertyType="Activity(sco:Collection(nnnl:LearningRule))">
                                    <na:ActivityWithResultValue.Activity>
                                      <mva:VisualBasicValue x:TypeArguments="sco:Collection(nnnl:LearningRule)" ExpressionText="rules" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_6" />
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nann:NewActivationLayer.ActivityWithResultProperties>
                                <nann:NewActivationLayer.InArgumentProperties>
                                  <na:InArgumentValue x:Key="size" ForProperty="False" Name="size" PropertyType="InArgument(x:Int32)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Int32">[trainingProvider.OutputInterfaceLength]</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                </nann:NewActivationLayer.InArgumentProperties>
                              </nann:NewActivationLayer>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                          <na:ActivityWithResultValue x:Key="InitParameters" ActivityResultType="nnn:NNInitParameters" ForProperty="True" Name="InitParameters" PropertyType="Activity(nnn:NNInitParameters)">
                            <na:ActivityWithResultValue.Activity>
                              <nannm:NewManagedNNInitParameters DisplayName="ManagedNNInitParameters" sap2010:WorkflowViewState.IdRef="NewManagedNNInitParameters_2" IsInitialized="True">
                                <nannm:NewManagedNNInitParameters.ActivityWithResultProperties>
                                  <na:ActivityWithResultValue x:Key="RecurrentOptions" ActivityResultType="nnn:RecurrentOptions" ForProperty="True" Name="RecurrentOptions" PropertyType="Activity(nnn:RecurrentOptions)">
                                    <na:ActivityWithResultValue.Activity>
                                      <nann:NewRecurrentOptions DisplayName="RecurrentOptions" sap2010:WorkflowViewState.IdRef="NewRecurrentOptions_1" IsInitialized="True">
                                        <nann:NewRecurrentOptions.InArgumentProperties>
                                          <na:InArgumentValue x:Key="maxIterations" ForProperty="False" Name="maxIterations" PropertyType="InArgument(x:Int32)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Int32">[ImgNoise.Properties.Settings.Default.RecurrentSampleLength]</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                          <na:InArgumentValue x:Key="isFullRecurrent" ForProperty="False" Name="isFullRecurrent" PropertyType="InArgument(x:Boolean)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                          <na:InArgumentValue x:Key="algorithm" ForProperty="False" Name="algorithm" PropertyType="InArgument(nnn:RLAlgorithm)">
                                            <na:InArgumentValue.InArgument>
                                              <InArgument x:TypeArguments="nnn:RLAlgorithm">[RLAlgorithm.RTLR]</InArgument>
                                            </na:InArgumentValue.InArgument>
                                          </na:InArgumentValue>
                                        </nann:NewRecurrentOptions.InArgumentProperties>
                                      </nann:NewRecurrentOptions>
                                    </na:ActivityWithResultValue.Activity>
                                  </na:ActivityWithResultValue>
                                </nannm:NewManagedNNInitParameters.ActivityWithResultProperties>
                                <nannm:NewManagedNNInitParameters.InArgumentProperties>
                                  <na:InArgumentValue x:Key="RunParallel" ForProperty="True" Name="RunParallel" PropertyType="InArgument(x:Boolean)">
                                    <na:InArgumentValue.InArgument>
                                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                    </na:InArgumentValue.InArgument>
                                  </na:InArgumentValue>
                                </nannm:NewManagedNNInitParameters.InArgumentProperties>
                              </nannm:NewManagedNNInitParameters>
                            </na:ActivityWithResultValue.Activity>
                          </na:ActivityWithResultValue>
                        </nann:NewStandardMultilayerNeuralNetwork.ActivityWithResultProperties>
                        <nann:NewStandardMultilayerNeuralNetwork.InArgumentProperties>
                          <na:InArgumentValue x:Key="InputSize" ForProperty="True" Name="InputSize" PropertyType="InArgument(x:Int32)">
                            <na:InArgumentValue.InArgument>
                              <InArgument x:TypeArguments="x:Int32">[trainingProvider.InputInterfaceLength]</InArgument>
                            </na:InArgumentValue.InArgument>
                          </na:InArgumentValue>
                        </nann:NewStandardMultilayerNeuralNetwork.InArgumentProperties>
                      </nann:NewStandardMultilayerNeuralNetwork>
                    </Sequence>
                  </Sequence>
                </na:ExperimentBranch.Body>
              </na:ExperimentBranch>
            </na:Experiment.Branches>
          </na:Experiment>
        </Sequence>
        <nannl:TrainingLoop Condition="[gIterationNo &lt;&gt; 6666666666666]" sap2010:WorkflowViewState.IdRef="TrainingLoop_1">
          <nannl:TrainingLoop.Body>
            <ActivityAction x:TypeArguments="x:Int32">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:Int32" Name="iterationNo" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Training Iteration Sequence" sap2010:WorkflowViewState.IdRef="Sequence_11">
                <nannl:UnorderedTrainingIteration DisplayName="Training Iteration" sap2010:WorkflowViewState.IdRef="UnorderedTrainingIteration_1" Network="[network]" Result="[trainingResult]">
                  <nannl:UnorderedTrainingIteration.GetNextBatch>
                    <ActivityFunc x:TypeArguments="nnn:NeuralVectorFlowBatch">
                      <ActivityFunc.Result>
                        <DelegateOutArgument x:TypeArguments="nnn:NeuralVectorFlowBatch" Name="batchResult" />
                      </ActivityFunc.Result>
                      <nannl:UnorderedProviderBasedBatcher LastResult="{x:Null}" BatchSize="50" DisplayName="Unordered Provider Based Batcher" sap2010:WorkflowViewState.IdRef="UnorderedProviderBasedBatcher_2" Provider="[trainingProvider]" ReinitializationFrequency="1000" Result="[batchResult]" UseCache="True">
                        <nannl:UnorderedProviderBasedBatcher.BatchingStrategy>
                          <navb:NewGaussianBatchingStrategyFactory DisplayName="GaussianBatchingStrategy" sap2010:WorkflowViewState.IdRef="NewGaussianBatchingStrategyFactory_1" IsInitialized="True">
                            <navb:NewGaussianBatchingStrategyFactory.InArgumentProperties>
                              <na:InArgumentValue x:Key="stdDev" ForProperty="False" Name="stdDev" PropertyType="InArgument(x:Double)">
                                <na:InArgumentValue.InArgument>
                                  <InArgument x:TypeArguments="x:Double">0.5</InArgument>
                                </na:InArgumentValue.InArgument>
                              </na:InArgumentValue>
                            </navb:NewGaussianBatchingStrategyFactory.InArgumentProperties>
                          </navb:NewGaussianBatchingStrategyFactory>
                        </nannl:UnorderedProviderBasedBatcher.BatchingStrategy>
                      </nannl:UnorderedProviderBasedBatcher>
                    </ActivityFunc>
                  </nannl:UnorderedTrainingIteration.GetNextBatch>
                </nannl:UnorderedTrainingIteration>
                <nannl:ValidationIteration DisplayName="Validation Iteration" EveryNthIteration="1" sap2010:WorkflowViewState.IdRef="ValidationIteration_1" Network="[network]" Result="[validationResult]">
                  <nannl:ValidationIteration.GetNextBatch>
                    <ActivityFunc x:TypeArguments="nnn:NeuralVectorFlowBatch">
                      <ActivityFunc.Result>
                        <DelegateOutArgument x:TypeArguments="nnn:NeuralVectorFlowBatch" Name="batchResult" />
                      </ActivityFunc.Result>
                      <nannl:UnorderedProviderBasedBatcher LastResult="{x:Null}" BatchSize="50" DisplayName="Unordered Provider Based Batcher" sap2010:WorkflowViewState.IdRef="UnorderedProviderBasedBatcher_1" Provider="[validationProvider]" ReinitializationFrequency="1000" Result="[batchResult]" UseCache="True">
                        <nannl:UnorderedProviderBasedBatcher.BatchingStrategy>
                          <navb:NewMonteCarloBatchingStrategyFactory DisplayName="MonteCarloBatchingStrategy" sap2010:WorkflowViewState.IdRef="NewMonteCarloBatchingStrategyFactory_1" IsInitialized="True" />
                        </nannl:UnorderedProviderBasedBatcher.BatchingStrategy>
                      </nannl:UnorderedProviderBasedBatcher>
                    </ActivityFunc>
                  </nannl:ValidationIteration.GetNextBatch>
                </nannl:ValidationIteration>
                <WriteLine sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[iterationNo.ToString(&quot;0000&quot;) + &quot; - Training Result: &quot; + trainingResult.AverageError.ToString(&quot;0.000000&quot;) + &quot; Validation Result: &quot; + validationResult.AverageError.ToString(&quot;0.000000&quot;)]" />
                <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[gIterationNo]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[iterationNo]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ActivityAction>
          </nannl:TrainingLoop.Body>
          <nannl:TrainingLoop.Variables>
            <Variable x:TypeArguments="ncv:BatchExecutionResult" Name="trainingResult" />
            <Variable x:TypeArguments="ncv:BatchExecutionResult" Name="validationResult" />
          </nannl:TrainingLoop.Variables>
        </nannl:TrainingLoop>
      </Sequence>
    </na:ComputationContext.Body>
    <na:ComputationContext.Variables>
      <Variable x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider" Name="trainingProvider" />
      <Variable x:TypeArguments="nnn:IUnorderedNeuralVectorFlowProvider" Name="validationProvider" />
      <Variable x:TypeArguments="x:Int32" Name="gIterationNo" />
      <Variable x:TypeArguments="nnn:NeuralNetwork" Name="network" />
    </na:ComputationContext.Variables>
    <sads:DebugSymbol.Symbol>dzVDOlxWUzExUHJvalxOZXVyb2Zsb3dcV0ZUZXN0Q29uc29sZVxJbWdOb2lzZVRlc3QueGFtbI0BTwPBBRsCAQFRB7gFEgIBAlIJ+wQUAgEm/AQJtwUeAgEDUwv6BBsCASf8BCf8BE4CASSCBQ+wBRoCAQRVD8sCJQIBZ8wCD/gEJQIBKIMFEZgFNAIBGJkFEaYFLQIBDKcFEacFvgICAQqoBRGvBRoCAQVXE8kCHgIBaM4CE/YEHgIBKYMFmwGDBaYBAgEigwWuAYMFwAECASCJBReVBT0CARmZBaUBmQWwAQIBFpkFuAGZBcwBAgEUnwUXowU9AgENpwVPpwW7AgIBC60FO60FSAIBCKoFPKoFSgIBBlgVaSADAZMBahXIAiACAWnPAhXgAiACAV7hAhX1BCACASqJBYoCiQWQAgIBH4kF2wGJBe8BAgEdiQVciQVgAgEciQWYAokFpwICARqfBYwCnwWSAgIBE58F2wGfBfEBAgERnwVcnwVgAgEQnwWaAp8FqQICAQ5ZF2AgAwGYAWEXaCADAZQBbhfJATkDAYABygEXxwJBAgFq0AIX1wIgAgFj2AIX3wIgAgFf5QIXqQMyAgFRqgMX4AM5AgFF4QMX9ARBAgEriwUbkwVFAwEZEKEFG6EFzwEDAQ0QXmBegQEDAZsBW2FbcwMBmQFmYGaLAQMBlwFjYWN1AwGVAW6YAW6hAQMBgQFwG4IBRQMBjwGDARvHATYDAYIBwwJFwwJsAgFtygHIAcoB0wECAWvOAR+LAjkCAXWQAh+sAjkCAXCxAh+8AkICAW7VAmDVAoABAgFm0gJh0gJzAgFk3QJg3QKKAQIBYtoCYdoCdQIBYKADR6ADSwIBWZsDT5sDaAIBWKUDRaUDRgIBV5YDR5YDTAIBVowDR4wDTAIBVYIDRoIDSwIBVJEDRpEDSgIBU4cDRocDSwIBUukCH/sCNgIBWqoDmAGqA6EBAgFGrAMbvgNFAgFNvwMb3gM6AgFH8ARF8ARsAgEu4QPIAeED0wECASzlAx+iBDkCATqnBB/DBDkCATXIBB/pBEICAS+PBUqPBU0DARkReUt5TwMBkgF+SX5KAwGRAXRKdE0DAZABvgFLvgFPAwGKAbkBU7kBbAMBiQHDAUnDAUoDAYgBtAFLtAFQAwGHAaoBS6oBUAMBhgGgAUqgAU8DAYUBrwFKrwFOAwGEAaUBSqUBTwMBgwGHASOZAToDAYsB0AEj7AE9AgF77QEjiQI9AgF2qAJNqAJ1AgFxlAInnAJKAgFzoQInoQLBAQIBcrgCT7gCVAIBb/cCT/cCUwIBXfICTvICVQIBXO0CTu0CTwIBW7UDS7UDTwIBULoDSboDSgIBT7ADSrADTQIBTtUDS9UDTwIBTNoDSdoDSgIBS9ADStADTQIBSsYDSsYDSwIBScsDScsDSwIBSOcDI4MEPQIBQIQEI6AEPQIBO78ETb8EdQIBNqsEJ7MESgIBOLgEJ7gEwQECATflBE/lBFQCATDMBCfeBEICATGVAVOVAVcDAY4BkAFSkAFZAwGNAYsBUosBUwMBjAHoAVHoAVMCAXzUASvcAU8CAX7hASvhAcUBAgF9hQJRhQJTAgF38QEr+QFPAgF5/gEr/gHFAQIBeJgCVpgCWgIBdP8DUf8DUwIBQesDK/MDTwIBQ/gDK/gDxQECAUKcBFGcBFICATyIBCuQBE8CAT6VBCuVBMUBAgE9rwRWrwRaAgE50ARV0ASRAQIBNNUEV9UEWwIBM9oEXdoEbwIBMtgBWtgBXgIBf/UBWvUBXgIBeu8DWu8DXgIBRIwEWowEXgIBPw==</sads:DebugSymbol.Symbol>
  </na:ComputationContext>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="496,284">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewNoisedWeightInitializationRule_1" sap:VirtualizedContainerService.HintSize="322,36" />
      <sap2010:ViewStateData Id="NewWeightDecay_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="NewSignChangesRule_1" sap:VirtualizedContainerService.HintSize="322,165">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewLearningRuleCollection_1" sap:VirtualizedContainerService.HintSize="474,276">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewSigmoidActivationFunction_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_1" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_1" sap:VirtualizedContainerService.HintSize="329,228" />
      <sap2010:ViewStateData Id="NewSigmoidActivationFunction_2" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_2" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_2" sap:VirtualizedContainerService.HintSize="329,228" />
      <sap2010:ViewStateData Id="NewLayerCollection_1" sap:VirtualizedContainerService.HintSize="343,531" />
      <sap2010:ViewStateData Id="NewLinearActivationFunction_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_3" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_3" sap:VirtualizedContainerService.HintSize="329,228" />
      <sap2010:ViewStateData Id="NewManagedNNInitParameters_1" sap:VirtualizedContainerService.HintSize="244,144" />
      <sap2010:ViewStateData Id="NewStandardMultilayerNeuralNetwork_1" sap:VirtualizedContainerService.HintSize="474,1172" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="496,1612">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="518,2060">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExperimentBranch_1" sap:VirtualizedContainerService.HintSize="540,2125" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="242,58" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="242,58" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="501,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewWeightDecay_2" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="NewSignChangesRule_2" sap:VirtualizedContainerService.HintSize="479,165" />
      <sap2010:ViewStateData Id="NewNoisedWeightInitializationRule_2" sap:VirtualizedContainerService.HintSize="218,36" />
      <sap2010:ViewStateData Id="NewGaussianHistoryRule_2" sap:VirtualizedContainerService.HintSize="218,144" />
      <sap2010:ViewStateData Id="NewLearningRuleCollection_2" sap:VirtualizedContainerService.HintSize="479,255">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewSigmoidActivationFunction_3" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_4" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_4" sap:VirtualizedContainerService.HintSize="329,228" />
      <sap2010:ViewStateData Id="NewSigmoidActivationFunction_4" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_5" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_5" sap:VirtualizedContainerService.HintSize="329,228">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="Math.IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewLayerCollection_2" sap:VirtualizedContainerService.HintSize="343,531" />
      <sap2010:ViewStateData Id="NewLinearActivationFunction_2" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="VisualBasicValue`1_6" sap:VirtualizedContainerService.HintSize="289,55" />
      <sap2010:ViewStateData Id="NewActivationLayer_6" sap:VirtualizedContainerService.HintSize="329,228" />
      <sap2010:ViewStateData Id="NewRecurrentOptions_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="NewManagedNNInitParameters_2" sap:VirtualizedContainerService.HintSize="348,165" />
      <sap2010:ViewStateData Id="NewStandardMultilayerNeuralNetwork_2" sap:VirtualizedContainerService.HintSize="479,1193" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="501,1817">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="523,2032">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExperimentBranch_2" sap:VirtualizedContainerService.HintSize="545,2125" />
      <sap2010:ViewStateData Id="Experiment_1" sap:VirtualizedContainerService.HintSize="1138,2161" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="1160,2285">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="NewGaussianBatchingStrategyFactory_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="UnorderedProviderBasedBatcher_2" sap:VirtualizedContainerService.HintSize="343,142" />
      <sap2010:ViewStateData Id="UnorderedTrainingIteration_1" sap:VirtualizedContainerService.HintSize="383,243" />
      <sap2010:ViewStateData Id="NewMonteCarloBatchingStrategyFactory_1" sap:VirtualizedContainerService.HintSize="200,36" />
      <sap2010:ViewStateData Id="UnorderedProviderBasedBatcher_1" sap:VirtualizedContainerService.HintSize="343,142" />
      <sap2010:ViewStateData Id="ValidationIteration_1" sap:VirtualizedContainerService.HintSize="383,243" />
      <sap2010:ViewStateData Id="WriteLine_1" sap:VirtualizedContainerService.HintSize="383,61" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="383,60" />
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="405,851">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TrainingLoop_1" sap:VirtualizedContainerService.HintSize="1160,999" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="1182,3448">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ComputationContext_1" sap:VirtualizedContainerService.HintSize="1196,3484" />
      <sap2010:ViewStateData Id="ImgNoiseTest_1" sap:VirtualizedContainerService.HintSize="1236,3564" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>