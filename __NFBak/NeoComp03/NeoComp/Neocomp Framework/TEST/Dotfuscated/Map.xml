<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.1.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2009-06-19T17:53:49</timestamp>
        <product version="5.0.1600.0" user="Unregistered " serial="000-00-000-391">Dotfuscator Software Services - Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>NeoComp.dll</name>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;entry&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;cn&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType0`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_cn</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_entry</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;cn&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;entry&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;pi&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;attrib&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType1`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_attrib</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_pi</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;attrib&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;pi&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;&lt;&gt;h__TransparentIdentifier2&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;creatorType&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType2`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_&lt;&gt;h__TransparentIdentifier2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_creatorType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&lt;&gt;h__TransparentIdentifier2&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;creatorType&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;iType&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;def&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType3`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_def</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_iType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;def&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;iType&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;UID&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;Index&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType4`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Index</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_UID</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Index&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;UID&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;UID&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;Entry&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType5`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Entry</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_UID</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Entry&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;UID&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;e&gt;j__TPar</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;v&gt;j__TPar</name>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType6`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_v</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;e&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;v&gt;i__Field</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{516A7421-5B12-4456-867B-E2CD758E3A21}</name>
                <newname>d</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{516A7421-5B12-4456-867B-E2CD758E3A21}/__StaticArrayInitTypeSize=6</signature>
                        <name>$$method0x6000768-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{516A7421-5B12-4456-867B-E2CD758E3A21}/__StaticArrayInitTypeSize=6</name>
                <newname>d/a</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.BooleanTransformer`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatEntry</name>
                <methodlist>
                    <method>
                        <signature>void(float64[], System.Nullable`1&lt;float64&gt;[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64[]()</signature>
                        <name>get_InputValues</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;[]()</signature>
                        <name>get_OutputValues</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64[]</signature>
                        <name>inputValues</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;[]</signature>
                        <name>outputValues</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatEntryCollection</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.CompFormatEntry[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.CompFormatEntry&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;float64&gt;(NeoComp.Computations.CompFormatEntry)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>float64(NeoComp.Computations.CompFormatEntry, float64)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;float64&gt;&gt;(NeoComp.Computations.CompFormatEntry)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;(NeoComp.Computations.CompFormatEntry, System.Nullable`1&lt;float64&gt;)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>float64(&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;)</signature>
                        <name>&lt;GetMinAndMaxValueInfo&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_InputSize</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_OutputSize</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;float64&gt;, System.Nullable`1&lt;float64&gt;&amp;, System.Nullable`1&lt;float64&gt;&amp;)</signature>
                        <name>GetMinAndMax</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64&amp;, float64&amp;, System.Nullable`1&lt;float64&gt;&amp;, System.Nullable`1&lt;float64&gt;&amp;)</signature>
                        <name>GetMinAndMaxValueInfo</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Computations.CompFormatEntry, NeoComp.Computations.CompFormatEntry)</signature>
                        <name>SizeEquals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.CompFormatEntry)</signature>
                        <name>Validate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Computations.CompFormatEntry,System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;NeoComp.Computations.CompFormatEntry,float64,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Computations.CompFormatEntry,System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;float64&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;,&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegateb</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatec</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType6`2&lt;NeoComp.Computations.CompFormatEntry,System.Nullable`1&lt;float64&gt;&gt;,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>&lt;Read&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;float64&gt;&gt;(string, bool, string)</signature>
                        <name>ParsePart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.CompFormatEntryCollection(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>ReadAllLines</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(int32)</signature>
                        <name>ReadLines</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>ReadLines</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Nullable`1&lt;float64&gt;,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>ioSeparators</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>numberSeparators</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IO.TextReader</signature>
                        <name>reader</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatReader/&lt;ParsePart&gt;d__2</name>
                <newname>NeoComp.Computations.CompFormatReader/c</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally8</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Nullable`1&lt;float64&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;.GetEnumerator</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Nullable&lt;System.Double&gt;&gt;.get_Current</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;3__line</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__nullAllowed</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;3__part</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.CompFormatReader</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;&gt;7__wrap9</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;7__wrapa</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;entries&gt;5__3</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;entry&gt;5__5</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;error&gt;5__4</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.IO.InvalidDataException</signature>
                        <name>&lt;ex&gt;5__7</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;value&gt;5__6</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>line</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>nullAllowed</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>part</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatReader/&lt;ReadAllLines&gt;d__d</name>
                <newname>NeoComp.Computations.CompFormatReader/b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.CompFormatReader</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;line&gt;5__e</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatReader/&lt;ReadLines&gt;d__11</name>
                <newname>NeoComp.Computations.CompFormatReader/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__count</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.CompFormatReader</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;idx&gt;5__12</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;line&gt;5__13</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.CompFormatUtils</name>
                <methodlist>
                    <method>
                        <arity>2</arity>
                        <signature>NeoComp.Computations.InputOutputValueUnitCollection`2&lt;!!0,!!1&gt;(NeoComp.Computations.CompFormatEntryCollection, NeoComp.Computations.ITransformer`2&lt;float64,!!0&gt;, NeoComp.Computations.ITransformer`2&lt;System.Nullable`1&lt;float64&gt;,!!1&gt;)</signature>
                        <name>ConvertToUnits</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.Computation`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;(NeoComp.Computations.IComputationalUnit`1&lt;!0&gt;, System.Collections.Generic.IList`1&lt;!0&gt;)</signature>
                        <name>ComputeOutput</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationBase`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;(NeoComp.Computations.IComputationalUnit`1&lt;!0&gt;, System.Collections.Generic.IList`1&lt;!0&gt;)</signature>
                        <name>ComputeOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;()</signature>
                        <name>get_Epoch</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;)</signature>
                        <name>set_Epoch</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;</signature>
                        <name>&lt;Epoch&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationEpoch`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32, int32, int32, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_InputBeginIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancellationRequested</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NumberOfIterations</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_OutputBeginIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_OutputSize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.IComputationalUnit`1&lt;!0&gt;, System.Collections.Generic.IList`1&lt;!0&gt;, System.Collections.Generic.IList`1&lt;!0&gt;)</signature>
                        <name>Run</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_InputBeginIndex</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NumberOfIterations</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_OutputBeginIndex</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_OutputSize</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;InputBeginIndex&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NumberOfIterations&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;OutputBeginIndex&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;OutputSize&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Threading.CancellationToken&gt;</signature>
                        <name>cancellationToken</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTest`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnitCollection`2&lt;!0,!1&gt;, NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;!0,!1&gt;(System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>CreateResults</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;()</signature>
                        <name>get_Epoch</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_InputSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_OutputSize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;[]()</signature>
                        <name>get_TestValueUnits</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_UID</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;)</signature>
                        <name>set_Epoch</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_InputSize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_OutputSize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;[])</signature>
                        <name>set_TestValueUnits</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>set_UID</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;!0,!1&gt;(NeoComp.Computations.IComputationalUnit`1&lt;!0&gt;)</signature>
                        <name>Test</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;</signature>
                        <name>&lt;Epoch&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;InputSize&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;OutputSize&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;[]</signature>
                        <name>&lt;TestValueUnits&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Guid</signature>
                        <name>&lt;UID&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTestContract`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!0&gt;, NeoComp.Computations.InputOutputValueUnitCollection`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;!0,!1&gt;(System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>CreateResults</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTestResult`2</name>
                <methodlist>
                    <method>
                        <signature>void(System.Guid, System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_MSE</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_TestUID</name>
                    </method>
                    <method>
                        <signature>float64(!0, !1)</signature>
                        <name>GetError</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;float64&gt;(NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;)</signature>
                        <name>GetErrors</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;()</signature>
                        <name>GetErrors</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_MSE</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>set_TestUID</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;MSE&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Guid</signature>
                        <name>&lt;TestUID&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>mseLock</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTestResult`2/&lt;GetErrors&gt;d__0</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;System.Double&gt;&gt;.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;float64&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;System.Double&gt;&gt;.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;float64&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap2</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;</signature>
                        <name>&lt;entry&gt;5__1</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTestResult`2/&lt;GetErrors&gt;d__6</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;float64&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Double&gt;.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Double&gt;.get_Current</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>m</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;3__entry</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;computedValue&gt;5__9</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;desiredValue&gt;5__a</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;idx&gt;5__8</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;length&gt;5__7</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ComputationTestResultEntry`2&lt;!0,!1&gt;</signature>
                        <name>entry</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.ComputationTestResultEntry`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;, !0[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>get_ComputedValues</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;()</signature>
                        <name>get_TestUnit</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0[]</signature>
                        <name>computedValues</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;</signature>
                        <name>testUnit</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.DoubleNormalizer</name>
                <methodlist>
                    <method>
                        <signature>void(float64, float64, float64, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Max</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Min</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_SourceMax</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_SourceMin</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Max</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Min</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_SourceMax</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_SourceMin</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Max&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Min&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;SourceMax&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;SourceMin&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>d</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>sd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.DoubleTransformer`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(!0)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.IComputationalUnit`1</name>
                <methodlist>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>ComputeOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!0&gt;()</signature>
                        <name>get_InputInterface</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!0&gt;()</signature>
                        <name>get_OutputInterface</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.IComputationalUnitContract`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.ComputeOutput</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!0&gt;()</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.get_InputInterface</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!0&gt;()</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.get_OutputInterface</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.InputOutputValueUnit`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0[], !1[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>get_InputValues</name>
                    </method>
                    <method>
                        <signature>!1[]()</signature>
                        <name>get_OutputValues</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0[]</signature>
                        <name>inputValues</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!1[]</signature>
                        <name>outputValues</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TI</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TO</name>
                </genericparameter>
                <name>NeoComp.Computations.InputOutputValueUnitCollection`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[](NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;GetInputValueUnits&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!1[](NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;GetOutputValueUnits&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_InputSize</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_OutputSize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ValueUnitCollection`1&lt;!0&gt;()</signature>
                        <name>GetInputValueUnits</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ValueUnitCollection`1&lt;!1&gt;()</signature>
                        <name>GetOutputValueUnits</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;, NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;)</signature>
                        <name>SizeEquals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;)</signature>
                        <name>Validate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;,!0[]&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Computations.InputOutputValueUnit`2&lt;!0,!1&gt;,!1[]&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.ITestResult</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_MSE</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;()</signature>
                        <name>GetErrors</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TFrom</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TTo</name>
                </genericparameter>
                <name>NeoComp.Computations.ITransformer`2</name>
                <methodlist>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.NormalizedDoubleTransformer`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.DoubleNormalizer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.DoubleNormalizer()</signature>
                        <name>get_Normalizer</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.DoubleNormalizer)</signature>
                        <name>set_Normalizer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64(!0)</signature>
                        <name>ToDouble</name>
                    </method>
                    <method>
                        <signature>float64(!0)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.DoubleNormalizer</signature>
                        <name>&lt;Normalizer&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TFrom</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TTo</name>
                </genericparameter>
                <name>NeoComp.Computations.NullableTransformer`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;!1&gt;(System.Nullable`1&lt;!0&gt;)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;</signature>
                        <name>valueConverter</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Computations.ToStringHelpers</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Text.StringBuilder, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>AppendValues</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Computations.Transformation</name>
                <methodlist>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Computations.ITransformer`2&lt;!!0,!!1&gt;)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TFrom</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TTo</name>
                </genericparameter>
                <name>NeoComp.Computations.Transformation/&lt;&gt;c__DisplayClass1`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>&lt;Transform&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;</signature>
                        <name>transformer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TOutter</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TInner</name>
                </genericparameter>
                <name>NeoComp.Computations.TransformedComputation`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.ComputationEpoch`1&lt;!1&gt;, NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;, NeoComp.Computations.ITransformer`2&lt;!1,!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;(NeoComp.Computations.IComputationalUnit`1&lt;!1&gt;, System.Collections.Generic.IList`1&lt;!0&gt;)</signature>
                        <name>ComputeOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!1,!0&gt;()</signature>
                        <name>get_InToOutTransformer</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;()</signature>
                        <name>get_OutToInTransformer</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ITransformer`2&lt;!1,!0&gt;)</signature>
                        <name>set_InToOutTransformer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;)</signature>
                        <name>set_OutToInTransformer</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!1,!0&gt;</signature>
                        <name>&lt;InToOutTransformer&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.ITransformer`2&lt;!0,!1&gt;</signature>
                        <name>&lt;OutToInTransformer&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Computations.ValueUnitCollection`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0[][])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0[]&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>bool(!0[], !0[])</signature>
                        <name>SizeEquals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>Validate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.Accessor`1</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Core.Accessor`1&lt;!0&gt;)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo()</signature>
                        <name>get_MemberInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.ParameterExpression()</signature>
                        <name>GetInstanceParameter</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInstanceTypeErrorMessage</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.ParameterExpression(string)</signature>
                        <name>GetParameter</name>
                    </method>
                    <method>
                        <signature>bool(object, System.Type)</signature>
                        <name>IsObjectOkForType</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>set_MemberInfo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>&lt;MemberInfo&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.AccessorFactory</name>
                <methodlist>
                    <method>
                        <signature>System.Type(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;CreateActionAccessor&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;CreateFuncAccessor&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IActionAccessor(System.Reflection.MethodInfo)</signature>
                        <name>CreateActionAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IActionAccessor(System.Type, string, System.Type[])</signature>
                        <name>CreateActionAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IFuncAccessor(System.Reflection.MethodInfo)</signature>
                        <name>CreateFuncAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IFuncAccessor(System.Type, System.Type, string, System.Type[])</signature>
                        <name>CreateFuncAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IPropertyOrFieldAccessor(System.Reflection.MemberInfo)</signature>
                        <name>CreatePropertyOrFieldAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IPropertyOrFieldAccessor(System.Type, System.Type, string)</signature>
                        <name>CreatePropertyOrFieldAccessor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IActionAccessor(System.Type, string, System.Type[])</signature>
                        <name>DoCreateActionAccessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IFuncAccessor(System.Type, System.Type, string, System.Type[])</signature>
                        <name>DoCreateFuncAccessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IPropertyOrFieldAccessor(System.Type, System.Type, string)</signature>
                        <name>DoCreatePropertyOrFieldAccessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.MemberInfo)</signature>
                        <name>GetMemberType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`1</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`2</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`3</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>4</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`4</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>5</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`5</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3, !4)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>6</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`6</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3, !4, !5)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>7</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`7</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3, !4, !5, !6)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>8</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TP7</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`8</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3, !4, !5, !6, !7)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>9</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TP7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>TP8</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessor`9</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1, !2, !3, !4, !5, !6, !7, !8)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.ActionAccessorBase`1</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Type[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(!0, object, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>void(object, object[])</signature>
                        <name>NeoComp.Core.IActionAccessor.Call</name>
                    </method>
                    <method>
                        <signature>void(object, object[])</signature>
                        <name>NeoComp.Core.IActionAccessor.FastCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.Args</name>
                <methodlist>
                    <method>
                        <signature>void(object, string, object, string)</signature>
                        <name>AreNotNull</name>
                    </method>
                    <method>
                        <signature>void(object, string, object, string, object, string)</signature>
                        <name>AreNotNull</name>
                    </method>
                    <method>
                        <signature>void(object, string, object, string, object, string, object, string)</signature>
                        <name>AreNotNull</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[], string, !!0[], string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[], string, !!0[], string, !!0[], string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[], string, !!0[], string, !!0[], string, !!0[], string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string, string, string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string, string, string, string, string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string)</signature>
                        <name>AreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string, System.Collections.Generic.ICollection`1&lt;!!0&gt;, string)</signature>
                        <name>ArgumentsAreNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, string)</signature>
                        <name>Cast</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, string, bool)</signature>
                        <name>Cast</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, string)</signature>
                        <name>CastAs</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, string, bool)</signature>
                        <name>CastAs</name>
                    </method>
                    <method>
                        <signature>void(object, string)</signature>
                        <name>CheckIsNotNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[], string)</signature>
                        <name>CheckIsNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>CheckIsNotNullOrEmpty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, string)</signature>
                        <name>CheckIsNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(object, string)</signature>
                        <name>IsNotNull</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[], string)</signature>
                        <name>IsNotNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>IsNotNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, string)</signature>
                        <name>IsNotNullOrEmpty</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.CancellationHelperExtensions</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>IsCancellationRequested</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.CollectionHelpers</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>int32(System.Collections.Generic.ICollection`1&lt;!!0&gt;)</signature>
                        <name>GetCount</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>int32(!!0[])</signature>
                        <name>GetLength</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(!!0[])</signature>
                        <name>IsNullOrEmpty</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.ICollection`1&lt;!!0&gt;)</signature>
                        <name>IsNullOrEmpty</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.ComputationalInterface`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.ComputationalValue`1&lt;!0&gt;[]()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface.get_Item</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>NeoComp.Core.IComputationalInterface.set_Item</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32, int32)</signature>
                        <name>ReadValues</name>
                    </method>
                    <method>
                        <signature>void(int32, !0)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32)</signature>
                        <name>WriteValues</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.ComputationalValue`1&lt;!0&gt;[]</signature>
                        <name>values</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.ComputationalValue`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.EnumerableExtensions</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Action`1&lt;!!0&gt;)</signature>
                        <name>ForEach</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.ErrorExtensions</name>
                <methodlist>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>&lt;Average&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>&lt;Sum&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>float64(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>Average</name>
                    </method>
                    <method>
                        <signature>float64(System.Collections.Generic.IEnumerable`1&lt;float64&gt;)</signature>
                        <name>MeanSquare</name>
                    </method>
                    <method>
                        <signature>float64(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>MeanSquare</name>
                    </method>
                    <method>
                        <signature>float64(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>Sum</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;float64,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;float64,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.FixSizedItemCollection`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>Initialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, !0)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>void(int32, !0)</signature>
                        <name>SetItem</name>
                    </method>
                    <method>
                        <signature>bool(!0, !0)</signature>
                        <name>SizeEquals</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Validate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>10</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TP7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>TP8</name>
                </genericparameter>
                <genericparameter sequence="9">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`10</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!9(!0, !1, !2, !3, !4, !5, !6, !7, !8)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!9(!0, object, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`2</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`3</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!2(!0, !1)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!2(!0, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>4</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`4</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!3(!0, !1, !2)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!3(!0, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>5</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`5</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!4(!0, !1, !2, !3)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!4(!0, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>6</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`6</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!5(!0, !1, !2, !3, !4)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!5(!0, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>7</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`7</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!6(!0, !1, !2, !3, !4, !5)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!6(!0, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>8</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`8</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!7(!0, !1, !2, !3, !4, !5, !6)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!7(!0, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>9</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TP1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TP2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TP3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>TP4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>TP5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TP6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TP7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessor`9</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!8(!0, !1, !2, !3, !4, !5, !6, !7)</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>!8(!0, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                </genericparameter>
                <name>NeoComp.Core.FuncAccessorBase`2</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Type[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>!1(!0, object, object, object, object, object, object, object, object)</signature>
                        <name>DoCall</name>
                    </method>
                    <method>
                        <signature>object(object, object[])</signature>
                        <name>NeoComp.Core.IFuncAccessor.Call</name>
                    </method>
                    <method>
                        <signature>object(object, object[])</signature>
                        <name>NeoComp.Core.IFuncAccessor.FastCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IAccessor</name>
                <methodlist>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo()</signature>
                        <name>get_MemberInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IActionAccessor</name>
                <methodlist>
                    <method>
                        <signature>void(object, object[])</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>void(object, object[])</signature>
                        <name>FastCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IComputationalInterface</name>
                <methodlist>
                    <method>
                        <signature>object(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.IComputationalInterface`1</name>
                <methodlist>
                    <method>
                        <signature>!0(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32, int32)</signature>
                        <name>ReadValues</name>
                    </method>
                    <method>
                        <signature>void(int32, !0)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32)</signature>
                        <name>WriteValues</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.IComputationalInterfaceContract`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface.get_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Core.IComputationalInterface.get_Length</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>NeoComp.Core.IComputationalInterface.set_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0(int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface&lt;T&gt;.get_Item</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32, int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface&lt;T&gt;.ReadValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, !0)</signature>
                        <name>NeoComp.Core.IComputationalInterface&lt;T&gt;.set_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;!0&gt;, int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface&lt;T&gt;.WriteValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IDataInterfaceContract</name>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Core.IComputationalInterface.get_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Core.IComputationalInterface.get_Length</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>NeoComp.Core.IComputationalInterface.set_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IFuncAccessor</name>
                <methodlist>
                    <method>
                        <signature>object(object, object[])</signature>
                        <name>Call</name>
                    </method>
                    <method>
                        <signature>object(object, object[])</signature>
                        <name>FastCall</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IInitializable</name>
                <methodlist>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>Initialize</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IMethodAccessor</name>
                <methodlist>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_MethodInfo</name>
                    </method>
                    <method>
                        <signature>System.Type[]()</signature>
                        <name>get_ParameterTypes</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.IntRange</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Core.IntRange)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixed</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Max</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Min</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsIn</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Core.IntRange, NeoComp.Core.IntRange)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Core.IntRange, NeoComp.Core.IntRange)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>PickRandomValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>max</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>min</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.IPropertyOrFieldAccessor</name>
                <methodlist>
                    <method>
                        <signature>object(object)</signature>
                        <name>FastGet</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>FastSet</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanGet</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSet</name>
                    </method>
                    <method>
                        <signature>System.Reflection.FieldInfo()</signature>
                        <name>get_FieldInfo</name>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo()</signature>
                        <name>get_PropertyInfo</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_PropertyOrFieldType</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.ISynchronized</name>
                <methodlist>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.ISynchronizedContract</name>
                <newname>u</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.ListExtensions</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList, System.Collections.IEnumerable)</signature>
                        <name>AddRange</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Type[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>CheckCallParameters</name>
                    </method>
                    <method>
                        <signature>System.Delegate(System.Type[])</signature>
                        <name>CompileAccessor</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Delegate()</signature>
                        <name>get_Accessor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_MethodInfo</name>
                    </method>
                    <method>
                        <signature>System.Type[]()</signature>
                        <name>get_ParameterTypes</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type[])</signature>
                        <name>GetCallMethodInfo</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.ParameterExpression[](System.Type[])</signature>
                        <name>GetCallPars</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(string, System.Type[])</signature>
                        <name>GetMethod</name>
                    </method>
                    <method>
                        <signature>string(System.Type[])</signature>
                        <name>GetMethodNotFoundErrorMessage</name>
                    </method>
                    <method>
                        <signature>void(System.Delegate)</signature>
                        <name>set_Accessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type[])</signature>
                        <name>set_ParameterTypes</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Delegate</signature>
                        <name>&lt;Accessor&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>&lt;ParameterTypes&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>6</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Action`5</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!1, !2, !3, !4, !5)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>7</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Action`6</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!1, !2, !3, !4, !5, !6)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>8</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Action`7</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!1, !2, !3, !4, !5, !6, !7)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>9</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>T8</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Action`8</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, !8, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!1, !2, !3, !4, !5, !6, !7, !8)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>10</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>T8</name>
                </genericparameter>
                <genericparameter sequence="9">
                    <name>T9</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Action`9</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, !8, !9, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!1, !2, !3, !4, !5, !6, !7, !8, !9)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>11</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>T8</name>
                </genericparameter>
                <genericparameter sequence="9">
                    <name>T9</name>
                </genericparameter>
                <genericparameter sequence="10">
                    <name>TR</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Func`10</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, !8, !9, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!10(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!10(!1, !2, !3, !4, !5, !6, !7, !8, !9)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>7</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>TR</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Func`6</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!6(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!6(!1, !2, !3, !4, !5)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>8</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>TR</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Func`7</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!7(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!7(!1, !2, !3, !4, !5, !6)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>9</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>TR</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Func`8</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!8(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!8(!1, !2, !3, !4, !5, !6, !7)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>10</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>T2</name>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>T3</name>
                </genericparameter>
                <genericparameter sequence="4">
                    <name>T4</name>
                </genericparameter>
                <genericparameter sequence="5">
                    <name>T5</name>
                </genericparameter>
                <genericparameter sequence="6">
                    <name>T6</name>
                </genericparameter>
                <genericparameter sequence="7">
                    <name>T7</name>
                </genericparameter>
                <genericparameter sequence="8">
                    <name>T8</name>
                </genericparameter>
                <genericparameter sequence="9">
                    <name>TR</name>
                </genericparameter>
                <name>NeoComp.Core.MethodAccessorBase`1/Func`9</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!1, !2, !3, !4, !5, !6, !7, !8, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!9(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!9(!1, !2, !3, !4, !5, !6, !7, !8)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Core.ObservableEnumerator`1</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerator`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OnEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>enumerator</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>onEnd</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.Probability</name>
                <methodlist>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Chance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsChance</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Core.Probability)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>float64(NeoComp.Core.Probability)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability(float64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Chance</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(float64, string)</signature>
                        <name>Verify</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>chance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TPropOrField</name>
                </genericparameter>
                <name>NeoComp.Core.PropertyOrFieldAccessor`2</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateGetAccessor</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateSetAccessor</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>FastGet</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>FastSet</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanGet</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSet</name>
                    </method>
                    <method>
                        <signature>System.Reflection.FieldInfo()</signature>
                        <name>get_FieldInfo</name>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo()</signature>
                        <name>get_PropertyInfo</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_PropertyOrFieldType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo()</signature>
                        <name>GetPropertyInfo</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetValueTypeErrorMessage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>IsInstanceTypeCorrect</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Set</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.PropertyOrFieldAccessor`2/GetAccessor&lt;!0,!1&gt;</signature>
                        <name>getAccessor</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.PropertyOrFieldAccessor`2/SetAccessor&lt;!0,!1&gt;</signature>
                        <name>setAccessor</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TPropOrField</name>
                </genericparameter>
                <name>NeoComp.Core.PropertyOrFieldAccessor`2/GetAccessor</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!0, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!1(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TPropOrField</name>
                </genericparameter>
                <name>NeoComp.Core.PropertyOrFieldAccessor`2/SetAccessor</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!0, !1, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.RandomGenerator</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>int32(!!0)</signature>
                        <name>&lt;OrderByRandom&gt;b__0</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_FiftyPercentChance</name>
                    </method>
                    <method>
                        <signature>System.Random()</signature>
                        <name>get_Random</name>
                    </method>
                    <method>
                        <signature>float64(float64, float64)</signature>
                        <name>NextDouble</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>OrderByRandom</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Random</signature>
                        <name>rnd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.StringExtensions</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>int32(string)</signature>
                        <name>GetHash</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsNullOrEmpty</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.SynchronizedObject</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_SyncRoot</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;SyncRoot&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Core.TypeExtensions</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Type)</signature>
                        <name>Implements</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>Implements</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>ImplementsCheck</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Type)</signature>
                        <name>IsA</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>IsA</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>IsACheck</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsNullable</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Core.TypeExtensions/&lt;&gt;c__DisplayClass1</name>
                <newname>b/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;ImplementsCheck&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>interfaceType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.ComputationalArchitecture</name>
                <methodlist>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;InitializeLayered&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetwork, System.Func`1&lt;NeoComp.Networks.Connection&gt;, int32, int32, int32, int32)</signature>
                        <name>ConnectLayer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(System.Func`1&lt;NeoComp.Networks.Connection&gt;)</signature>
                        <name>CreateConnection</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetwork, System.Func`1&lt;NeoComp.Networks.Node&gt;, int32, int32)</signature>
                        <name>CreateLayer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(System.Func`1&lt;NeoComp.Networks.Node&gt;)</signature>
                        <name>CreateNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.InvalidOperationException(System.Exception)</signature>
                        <name>GetErrorEx</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetwork, int32, System.Func`1&lt;NeoComp.Networks.Connection&gt;, System.Func`1&lt;NeoComp.Networks.Node&gt;, bool)</signature>
                        <name>InitializeFullConnected</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetwork, System.Func`1&lt;NeoComp.Networks.Connection&gt;, System.Func`1&lt;NeoComp.Networks.Node&gt;, bool, int32[])</signature>
                        <name>InitializeLayered</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Predicate`1&lt;int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.ComputationalConnection`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.ComputationalValue`1&lt;!0&gt;()</signature>
                        <name>get_ConnectionValue</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.ComputationalValue`1&lt;!0&gt;)</signature>
                        <name>Initialize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.ComputationalValue`1&lt;!0&gt;)</signature>
                        <name>set_ConnectionValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Setup</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.ComputationalValue`1&lt;!0&gt;</signature>
                        <name>&lt;ConnectionValue&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.ComputationalNetwork`2</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>AddNode</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,NeoComp.Networks.ComputationalNode`2&lt;!0,!1&gt;&gt;()</signature>
                        <name>GenerateConnectedNodes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>GenerateOutput</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Threading.CancellationToken)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;()</signature>
                        <name>get_InputInterface</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;()</signature>
                        <name>get_OutputInterface</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeConnections</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ComputationalNode`2&lt;!0,!1&gt;)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectedNode`2&lt;!0,NeoComp.Networks.ComputationalNode`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.ComputeOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!1&gt;()</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.get_InputInterface</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface`1&lt;!1&gt;()</signature>
                        <name>NeoComp.Computations.IComputationalUnit&lt;T&gt;.get_OutputInterface</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetwork.AddNode</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface()</signature>
                        <name>NeoComp.Networks.IComputationalNetwork.get_InputInterface</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface()</signature>
                        <name>NeoComp.Networks.IComputationalNetwork.get_OutputInterface</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetwork.RemoveNode</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetwork.TryAddNode</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseContextItems</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;)</signature>
                        <name>set_InputInterface</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;)</signature>
                        <name>set_OutputInterface</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>TryAddNode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;</signature>
                        <name>&lt;InputInterface&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;</signature>
                        <name>&lt;OutputInterface&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.ComputationalNetwork`2/&lt;&gt;c__DisplayClass37</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ComputationalSubnetworkNode`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;RemoveNode&gt;b__35</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;</signature>
                        <name>subnetwork</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.ComputationalNode`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0[], !0[])</signature>
                        <name>ComputeOutputValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0[], !0[], !1&amp;)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>void(!1, !0[])</signature>
                        <name>SetupOutput</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.ComputationalSubnetworkNode`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(!0[], !0[], !1&amp;)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;()</signature>
                        <name>get_InnerNetwork</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>set_InnerNetwork</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>SetupInput</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>SetupOutput</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;</signature>
                        <name>&lt;InnerNetwork&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.ConnectedNode`2</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!0&gt;, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>get_LowerConnectionArray</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!0&gt;()</signature>
                        <name>get_LowerConnections</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Node</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>get_UpperConnectionArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!0&gt;()</signature>
                        <name>get_UpperConnections</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IConnection&gt;()</signature>
                        <name>NeoComp.Networks.IConnectedNode.get_LowerConnections</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.INode()</signature>
                        <name>NeoComp.Networks.IConnectedNode.get_Node</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IConnection&gt;()</signature>
                        <name>NeoComp.Networks.IConnectedNode.get_UpperConnections</name>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>set_LowerConnectionArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_Node</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>set_UpperConnectionArray</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0[]</signature>
                        <name>&lt;LowerConnectionArray&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Node&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0[]</signature>
                        <name>&lt;UpperConnectionArray&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.ConnectedNodeCollection`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>bool(NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;CreateView&gt;b__0</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>NeoComp.Networks.ConnectedNode`2&lt;!!0,!!1&gt;(NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;CreateView&gt;b__1</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!!0,!!1&gt;()</signature>
                        <name>CreateView</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;[]()</signature>
                        <name>get_ConnectedNodeArray</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Connection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectionIndex()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>set_Index</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.ConnectionIndex</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.ConnectionIndex</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LowerNodeIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_UpperNodeIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_GreaterThan</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_GreaterThanOrEqual</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_LessThan</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.ConnectionIndex)</signature>
                        <name>op_LessThanOrEqual</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>lowerNodeIndex</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>upperNodeIndex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.IAdjustable</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Adjustment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Adjustment</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.IComputationalNetwork</name>
                <methodlist>
                    <method>
                        <signature>void(int32, NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>AddNode</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>void(System.Threading.CancellationToken)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface()</signature>
                        <name>get_InputInterface</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IComputationalInterface()</signature>
                        <name>get_OutputInterface</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>TryAddNode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.IComputationalNetworkTest</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Computations.ITestResult(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>Test</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.IComputationalNetworkTestContract</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITestResult(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetworkTest.Test</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.IConnectedNode</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IConnection&gt;()</signature>
                        <name>get_LowerConnections</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.INode()</signature>
                        <name>get_Node</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IConnection&gt;()</signature>
                        <name>get_UpperConnections</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.IConnection</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Networks.ConnectionIndex()</signature>
                        <name>get_Index</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.INetwork</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.Connection)</signature>
                        <name>AddConnection</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.Node)</signature>
                        <name>AddNode</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_ConnectedNodes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ConnectionCount</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NodeCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>GetConnections</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>GetNodes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseContext</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>RemoveConnection</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Node)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.Connection)</signature>
                        <name>TryAddConnection</name>
                    </method>
                    <method>
                        <signature>bool(int32, NeoComp.Networks.Node)</signature>
                        <name>TryAddNode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.INode</name>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicalConnection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_BitValue</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicalNetwork</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicalNetworkTest</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnitCollection`2&lt;bool,System.Nullable`1&lt;bool&gt;&gt;, NeoComp.Computations.ComputationEpoch`1&lt;bool&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetworkTest(NeoComp.Computations.CompFormatEntryCollection, NeoComp.Computations.ComputationEpoch`1&lt;bool&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetworkTest(string, NeoComp.Computations.ComputationEpoch`1&lt;bool&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetworkTest(System.IO.FileInfo, NeoComp.Computations.ComputationEpoch`1&lt;bool&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetworkTest(System.IO.TextReader, NeoComp.Computations.ComputationEpoch`1&lt;bool&gt;, System.Nullable`1&lt;int32&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;bool,System.Nullable`1&lt;bool&gt;&gt;(System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;bool,System.Nullable`1&lt;bool&gt;&gt;&gt;)</signature>
                        <name>CreateResults</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITestResult(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetworkTest.Test</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetworkTestResult(NeoComp.Networks.Logical.LogicalNetwork)</signature>
                        <name>Test</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicalNetworkTest/Converter</name>
                <newname>NeoComp.Networks.Logical.LogicalNetworkTest/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(float64)</signature>
                        <name>Transform</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicalNetworkTestResult</name>
                <methodlist>
                    <method>
                        <signature>void(System.Guid, System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;bool,System.Nullable`1&lt;bool&gt;&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(bool, System.Nullable`1&lt;bool&gt;)</signature>
                        <name>GetError</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicGate</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Logical.LogicGateType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Logical.LogicGateType, NeoComp.Networks.Logical.LogicGateInputRestrictions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[], NeoComp.Networks.Logical.LogicalConnection[], bool&amp;)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicGateType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetAND</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetNAND</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetNOR</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetOR</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetXNOR</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Logical.LogicalConnection[])</signature>
                        <name>GetXOR</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Logical.LogicGateType)</signature>
                        <name>set_Type</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Logical.LogicalConnection[],bool&gt;</signature>
                        <name>getOutputMethod</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;NeoComp.Core.IntRange&gt;</signature>
                        <name>restriction</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicGateInputRestrictions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;NeoComp.Core.IntRange&gt;(NeoComp.Networks.Logical.LogicGateType)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Logical.LogicGateType, System.Nullable`1&lt;NeoComp.Core.IntRange&gt;)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>isSealed</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;NeoComp.Networks.Logical.LogicGateType,NeoComp.Core.IntRange&gt;</signature>
                        <name>restrictions</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateInputRestrictions</signature>
                        <name>Standard</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Logical.LogicGateType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>AND</name>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>NAND</name>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>NOR</name>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>OR</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>XNOR</name>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType</signature>
                        <name>XOR</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.Network`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__2b</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType0`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;&gt;(NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__2c</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__2d</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__2e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(&lt;&gt;f__AnonymousType0`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__2f</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;(&lt;&gt;f__AnonymousType0`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>&lt;GenerateConnectedNodes&gt;b__30</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>&lt;get_ConnectionCount&gt;b__2</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>!1(NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>&lt;get_NodeCount&gt;b__6</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(!1)</signature>
                        <name>&lt;get_NodeCount&gt;b__7</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!1(NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>&lt;GetNodes&gt;b__1e</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(!1)</signature>
                        <name>&lt;GetNodes&gt;b__1f</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex, !0)</signature>
                        <name>AddConnection</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;)</signature>
                        <name>AddEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, !1)</signature>
                        <name>AddNode</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>ConnectionAdded</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>ConnectionRemoved</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureConnectedNodes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureContext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureContextItems</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;()</signature>
                        <name>GenerateConnectedNodes</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;()</signature>
                        <name>get_ConnectedNodes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ConnectionCount</name>
                    </method>
                    <method>
                        <signature>!0(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>!1(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NodeCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>GetConnections</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;(int32)</signature>
                        <name>GetEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!1&gt;()</signature>
                        <name>GetNodes</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;(int32)</signature>
                        <name>GetOrCreateEntry</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>bool(!1)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.Connection)</signature>
                        <name>NeoComp.Networks.INetwork.AddConnection</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Networks.Node)</signature>
                        <name>NeoComp.Networks.INetwork.AddNode</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>NeoComp.Networks.INetwork.get_ConnectedNodes</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>NeoComp.Networks.INetwork.get_Item</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(int32)</signature>
                        <name>NeoComp.Networks.INetwork.get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>NeoComp.Networks.INetwork.GetConnections</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>NeoComp.Networks.INetwork.GetNodes</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Node)</signature>
                        <name>NeoComp.Networks.INetwork.RemoveNode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, NeoComp.Networks.Connection)</signature>
                        <name>NeoComp.Networks.INetwork.TryAddConnection</name>
                    </method>
                    <method>
                        <signature>bool(int32, NeoComp.Networks.Node)</signature>
                        <name>NeoComp.Networks.INetwork.TryAddNode</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>NodeAdded</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>NodeRemoved</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseContext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseContextItems</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>RemoveConnection</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveEntry</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(!1)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>RemoveNode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.ConnectionIndex, !0)</signature>
                        <name>TryAddConnection</name>
                    </method>
                    <method>
                        <signature>bool(int32, !1)</signature>
                        <name>TryAddNode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;</signature>
                        <name>connectedNodes</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,!1&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate20</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!1,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate21</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType0`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;&gt;,NeoComp.Networks.ConnectedNode`2&lt;!0,!1&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate31</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;,!1&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!1,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;&gt;</signature>
                        <name>entries</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>size</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.Network`2/&lt;GetConnections&gt;d__12</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally16</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally18</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1a</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TConnection&gt;.GetEnumerator</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TConnection&gt;.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>k</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Network`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;7__wrap15</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2/ValueCollection/Enumerator&lt;int32,NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap17</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2/ValueCollection/Enumerator&lt;int32,!0&gt;</signature>
                        <name>&lt;&gt;7__wrap19</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;s__LockTaken11</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;conn&gt;5__14</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Network`2/NodeEntry&lt;!0,!1&gt;</signature>
                        <name>&lt;entry&gt;5__13</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.Network`2/&lt;GetNodes&gt;d__22</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally25</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally27</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TNode&gt;.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Network`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;7__wrap24</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;7__wrap26</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;s__LockTaken1d</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;n&gt;5__23</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNode</name>
                </genericparameter>
                <name>NeoComp.Networks.Network`2/NodeEntry</name>
                <methodlist>
                    <method>
                        <signature>void(!1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,!0&gt;()</signature>
                        <name>get_LowerConnections</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Node</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,!0&gt;()</signature>
                        <name>get_UpperConnections</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_Node</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Node&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,!0&gt;</signature>
                        <name>lowerConnections</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,!0&gt;</signature>
                        <name>upperConnections</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.NetworkExtensions</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IAdjustable&gt;(NeoComp.Networks.INetwork)</signature>
                        <name>GetAdjustableItems</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.NetworkInterface`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.NetworkInterface`2/ConnectionInfo&lt;!0,!1&gt;()</signature>
                        <name>get_Connections</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;()</signature>
                        <name>get_OwnerNetwork</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.ComputationalValue`1&lt;!1&gt;(int32)</signature>
                        <name>GetDataValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.NetworkInterface`2/ConnectionInfo&lt;!0,!1&gt;)</signature>
                        <name>set_Connections</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;)</signature>
                        <name>set_OwnerNetwork</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.NetworkInterface`2/ConnectionInfo&lt;!0,!1&gt;</signature>
                        <name>&lt;Connections&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.ComputationalNetwork`2&lt;!0,!1&gt;</signature>
                        <name>&lt;OwnerNetwork&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.NetworkInterface`2/ConnectionCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TConnection</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Networks.NetworkInterface`2/ConnectionInfo</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.NetworkInterface`2/ConnectionCollection&lt;!0,!1&gt;(int32)</signature>
                        <name>&lt;.ctor&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!0&gt;(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.NetworkInterface`2/ConnectionCollection&lt;!0,!1&gt;(int32)</signature>
                        <name>GetCollection</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.NetworkInterface`2/ConnectionCollection&lt;!0,!1&gt;[]</signature>
                        <name>collections</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,NeoComp.Networks.NetworkInterface`2/ConnectionCollection&lt;!0,!1&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.NetworkInterface`2&lt;!0,!1&gt;</signature>
                        <name>owner</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.ActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.ActivationNeuron</name>
                <methodlist>
                    <method>
                        <signature>void(float64, NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Activation</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Networks.Neural.Synapse[], NeoComp.Networks.Neural.Synapse[], float64&amp;)</signature>
                        <name>GenerateOutput</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.IActivationFunction()</signature>
                        <name>get_ActivationFunction</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Bias</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Networks.IAdjustable.get_Adjustment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Networks.IAdjustable.set_Adjustment</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>set_ActivationFunction</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Bias</name>
                    </method>
                    <method>
                        <signature>float64(NeoComp.Networks.Neural.Synapse[])</signature>
                        <name>Sum</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Neural.IActivationFunction</signature>
                        <name>&lt;ActivationFunction&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Bias&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.AlphaBasedActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Alpha</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Alpha</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Alpha&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.BipolarLinearActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.BipolarSigmoidActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Derivate</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.DerivatableActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Derivate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.IActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.IActivationNeuron</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Networks.Neural.IActivationFunction()</signature>
                        <name>get_ActivationFunction</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Bias</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Bias</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.IDerivatableActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Derivate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.INeuron</name>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.IObservableActivationNeuron</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Input</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Output</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.ISynapse</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Input</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Output</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Weight</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Weight</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.LinearActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.LinearActivationFunction(bool, float64)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.NeuralArchitecture</name>
                <methodlist>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;CreateLayered&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork(int32, int32, int32, System.Func`1&lt;NeoComp.Networks.Neural.Synapse&gt;, System.Func`1&lt;NeoComp.Networks.Neural.Neuron&gt;, bool)</signature>
                        <name>CreateFullConnected</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork(int32, int32, System.Func`1&lt;NeoComp.Networks.Neural.Synapse&gt;, System.Func`1&lt;NeoComp.Networks.Neural.Neuron&gt;, bool, int32[])</signature>
                        <name>CreateLayered</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Predicate`1&lt;int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.NeuralNetwork</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.NeuralNetworkTest</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Computations.InputOutputValueUnitCollection`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;, NeoComp.Computations.DoubleNormalizer, NeoComp.Computations.DoubleNormalizer, NeoComp.Computations.ComputationEpoch`1&lt;float64&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest(NeoComp.Computations.CompFormatEntryCollection, bool, NeoComp.Computations.ComputationEpoch`1&lt;float64&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest(string, bool, NeoComp.Computations.ComputationEpoch`1&lt;float64&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest(System.IO.FileInfo, bool, NeoComp.Computations.ComputationEpoch`1&lt;float64&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest(System.IO.TextReader, bool, NeoComp.Computations.ComputationEpoch`1&lt;float64&gt;, System.Nullable`1&lt;int32&gt;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResult`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;(System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;)</signature>
                        <name>CreateResults</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;()</signature>
                        <name>get_Computation</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.DoubleNormalizer()</signature>
                        <name>get_InToOutNormalizer</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.DoubleNormalizer()</signature>
                        <name>get_OutToInNormalizer</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITestResult(NeoComp.Networks.IComputationalNetwork)</signature>
                        <name>NeoComp.Networks.IComputationalNetworkTest.Test</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.DoubleNormalizer)</signature>
                        <name>set_InToOutNormalizer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.DoubleNormalizer)</signature>
                        <name>set_OutToInNormalizer</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetwork)</signature>
                        <name>Test</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.DoubleNormalizer</signature>
                        <name>&lt;InToOutNormalizer&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.DoubleNormalizer</signature>
                        <name>&lt;OutToInNormalizer&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;</signature>
                        <name>computation</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.NeuralNetworkTestResult</name>
                <methodlist>
                    <method>
                        <signature>void(System.Guid, System.Collections.Generic.IList`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;, NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;()</signature>
                        <name>get_Computation</name>
                    </method>
                    <method>
                        <signature>float64(float64, System.Nullable`1&lt;float64&gt;)</signature>
                        <name>GetError</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;)</signature>
                        <name>set_Computation</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.TransformedComputation`2&lt;float64,float64&gt;</signature>
                        <name>&lt;Computation&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.Neuron</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.ObservableActivationNeuron</name>
                <methodlist>
                    <method>
                        <signature>void(float64, NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Activation</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Input</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Output</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Input</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Output</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64(NeoComp.Networks.Neural.Synapse[])</signature>
                        <name>Sum</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Input&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Output&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Neural.SigmoidActivationFunction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.SigmoidActivationFunction(bool, float64)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Derivate</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>Function</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Networks.Neural.Synapse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Input</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Output</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Weight</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Networks.IAdjustable.get_Adjustment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Networks.IAdjustable.set_Adjustment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Weight</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Weight&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Networks.Node</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.BestBodyArrivedEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IBody()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IBody)</signature>
                        <name>set_Body</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.IBody</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Body</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2</name>
                <methodlist>
                    <method>
                        <signature>void(!1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_Body</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>typedBody</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IBody()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IGroup()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IBody)</signature>
                        <name>set_Body</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IGroup)</signature>
                        <name>set_Group</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.IBody</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.IGroup</signature>
                        <name>&lt;Group&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2</name>
                <methodlist>
                    <method>
                        <signature>void(!1, NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_Body</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>set_Group</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>typedBody</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;</signature>
                        <name>typedGroup</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.BestBodyArrivedToPopulationEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation, NeoComp.Optimization.GA.IGroup, NeoComp.Optimization.GA.IBody)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IBody()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IGroup()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.IPopulation()</signature>
                        <name>get_Population</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IBody)</signature>
                        <name>set_Body</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IGroup)</signature>
                        <name>set_Group</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation)</signature>
                        <name>set_Population</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.IBody</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.IGroup</signature>
                        <name>&lt;Group&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.IPopulation</signature>
                        <name>&lt;Population&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Body`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Plan</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_UID</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_Plan</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>set_UID</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Guid</signature>
                        <name>&lt;UID&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.BodyCount</name>
                <methodlist>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Percent</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetCount</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.BodyCount(float64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.BodyCount(int32)</signature>
                        <name>op_Implicit</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>count</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>percent</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BodyFactory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>CreateAndInitializeBody</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>CreateBody</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>CreateInitialPlan</name>
                    </method>
                    <method>
                        <signature>!1(System.Collections.Generic.IEnumerable`1&lt;!1&gt;, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>CreateOffspring</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!1&gt;(int32, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>CreateRandomBodies</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0(!0, !0)</signature>
                        <name>Crossover</name>
                    </method>
                    <method>
                        <signature>void(!1, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>Initialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0(!0, bool)</signature>
                        <name>Mutate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BodyFactory`2/&lt;CreateRandomBodies&gt;d__0</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TBody&gt;.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TBody&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Threading.CancellationToken&gt;</signature>
                        <name>&lt;&gt;3__cancellationToken</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__count</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.BodyFactory`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;body&gt;5__3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;idx&gt;5__1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;plan&gt;5__2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Threading.CancellationToken&gt;</signature>
                        <name>cancellationToken</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.BodyFactoryContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>CreateBody</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>CreateInitialPlan</name>
                    </method>
                    <method>
                        <signature>!0(!0, !0)</signature>
                        <name>Crossover</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TItem</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.CollectionPropertySuccessFactor`3</name>
                <methodlist>
                    <method>
                        <signature>void(!0, NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;(NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;)</signature>
                        <name>&lt;LastKnownValueChanged&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEnumerable)</signature>
                        <name>AddHandlers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.PropertySuccessFactor`2&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Enter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Exit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;[]()</signature>
                        <name>get_LastKnownFactors</name>
                    </method>
                    <method>
                        <signature>object(System.Collections.Generic.IEnumerable`1&lt;!2&gt;)</signature>
                        <name>GetSyncRoot</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>LastKnownValueChanged</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnFactorDirtied</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>ReceiveWeakEvent</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEnumerable, NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;[])</signature>
                        <name>RemoveHandlers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;[])</signature>
                        <name>set_LastKnownFactors</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!2&gt;(!1)</signature>
                        <name>ValueAsCollection</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;[]</signature>
                        <name>&lt;LastKnownFactors&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;,NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!2&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyComparerBase&lt;!0,!1&gt;()</signature>
                        <name>CreateComparer</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritory`2/BodyComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;)</signature>
                        <name>&lt;GetEnumerator&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyComparerBase&lt;!0,!1&gt;()</signature>
                        <name>CreateComparer</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;(!1)</signature>
                        <name>CreateObserver</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInitialized</name>
                    </method>
                    <method>
                        <signature>!1(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;(!1)</signature>
                        <name>GetObserver</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Optimization.GA.ISelectableItemCollection.Select</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;)</signature>
                        <name>OnBestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;</signature>
                        <name>BestBodyArrived</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;,!1&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>C5.TreeSet`1&lt;NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;&gt;</signature>
                        <name>sortedBodies</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyComparerBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Plan</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_UID</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_Plan</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_Body</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ComparableBodyTerritoryBaseContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyComparerBase&lt;!0,!1&gt;()</signature>
                        <name>CreateComparer</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ComparationMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ComparationMode</signature>
                        <name>LowerIsBetter</name>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ComparationMode</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ComparationMode</signature>
                        <name>NullIsBetter</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.DNASequence</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>NeoComp.Optimization.GA.DNASequence`1&lt;!!0&gt;(NeoComp.Optimization.GA.DNASequence`1&lt;!!0&gt;, NeoComp.Optimization.GA.DNASequence`1&lt;!!0&gt;, NeoComp.Core.IntRange)</signature>
                        <name>Crossover</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.DNASequence`1</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability, System.Func`2&lt;!0,!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void(System.Action`1&lt;System.Collections.Generic.IList`1&lt;!0&gt;&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>ToList</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.FactoredBodyTerritory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyComparerBase&lt;!0,!1&gt;()</signature>
                        <name>CreateComparer</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;(!1)</signature>
                        <name>CreateObserver</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.FactoredBodyTerritory`2/BodyComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparableBodyTerritoryBase`2/BodyObserver&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.FactoredBodyTerritory`2/FactoredBodyObserver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor()</signature>
                        <name>get_SuccessFactor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISuccessFactor)</signature>
                        <name>set_SuccessFactor</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor</signature>
                        <name>&lt;SuccessFactor&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.GAContext</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;NeoComp.Optimization.GA.IPopulation&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Start&gt;b__9</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToPopulationEventArgs&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation)</signature>
                        <name>AddHandlers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BestBodyArrivedToPopulationEventArgs)</signature>
                        <name>OnBestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(object, NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs)</signature>
                        <name>PopulationBestBodyArrived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToPopulationEventArgs&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.IPopulation)</signature>
                        <name>RemoveHandlers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToPopulationEventArgs&gt;</signature>
                        <name>BestBodyArrived</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;NeoComp.Optimization.GA.IPopulation&gt;</signature>
                        <name>populations</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>populationSync</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Tasks.Task</signature>
                        <name>populationTask</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Group`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BodyFactory`2&lt;!0,!1&gt;, NeoComp.Optimization.GA.ITerritory`2&lt;!0,!1&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;)</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Add</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!1&gt;)</signature>
                        <name>Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>add_BestBodyArrivedHelper</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>AddInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>CreateOffspring</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>GAStarted</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.BodyFactory`2&lt;!0,!1&gt;()</signature>
                        <name>get_BodyFactory</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_ParentCount</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy()</signature>
                        <name>get_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ITerritory`2&lt;!0,!1&gt;()</signature>
                        <name>get_Territory</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2&lt;!0,!1&gt;)</signature>
                        <name>OnBestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>remove_BestBodyArrivedHelper</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!1&gt;(int32)</signature>
                        <name>SelectParents</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BodyFactory`2&lt;!0,!1&gt;)</signature>
                        <name>set_BodyFactory</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_ParentCount</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISelectionStrategy)</signature>
                        <name>set_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Size</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ITerritory`2&lt;!0,!1&gt;)</signature>
                        <name>set_Territory</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TrimExcess</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.BodyFactory`2&lt;!0,!1&gt;</signature>
                        <name>&lt;BodyFactory&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ITerritory`2&lt;!0,!1&gt;</signature>
                        <name>&lt;Territory&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2&lt;!0,!1&gt;&gt;</signature>
                        <name>BestBodyArrived</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;</signature>
                        <name>BestBodyArrivedHelper</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>parentCount</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy</signature>
                        <name>selectionStrategy</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>size</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Group`2/&lt;SelectParents&gt;d__9</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally10</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally12</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally15</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TBody&gt;.GetEnumerator</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TBody&gt;.get_Current</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__parentCount</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;7__wrap11</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>&lt;&gt;7__wrap13</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.IDisposable</signature>
                        <name>&lt;&gt;7__wrap14</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;7__wrapf</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;s__LockTaken8</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;body&gt;5__a</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;body&gt;5__e</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;bodyObj&gt;5__d</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerable</signature>
                        <name>&lt;selectedBodies&gt;5__c</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy</signature>
                        <name>&lt;strategy&gt;5__b</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>parentCount</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.GroupCollection`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.Population`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearItems</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;&gt;()</signature>
                        <name>get_InternalList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>SetItem</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.Population`2&lt;!0,!1&gt;</signature>
                        <name>ownerPopulation</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IBody</name>
                <methodlist>
                    <method>
                        <signature>object()</signature>
                        <name>get_Plan</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_UID</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.IBody`1</name>
                <methodlist>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Plan</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IBodyContract</name>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_Plan</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_UID</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.IBodyContract`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_Plan</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>NeoComp.Optimization.GA.IBody.get_UID</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>NeoComp.Optimization.GA.IBody&lt;TBodyPlan&gt;.get_Plan</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IGroup</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_ParentCount</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy()</signature>
                        <name>get_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_ParentCount</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISelectionStrategy)</signature>
                        <name>set_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Size</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IGroupContract</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>NeoComp.Optimization.GA.IGroup.get_ParentCount</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy()</signature>
                        <name>NeoComp.Optimization.GA.IGroup.get_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Optimization.GA.IGroup.get_Size</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.set_ParentCount</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISelectionStrategy)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.set_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>NeoComp.Optimization.GA.IGroup.set_Size</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IPopulation</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_Groups</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Step</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.IPopulationContract</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.get_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.get_Groups</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.Initialize</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.set_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.Step</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ISelectableItemCollection</name>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>Select</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ISelectableItemCollectionContract</name>
                <newname>x</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Optimization.GA.ISelectableItemCollection.get_Count</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Optimization.GA.ISelectableItemCollection.Select</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ISelectionStrategy</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.IEnumerable(NeoComp.Optimization.GA.ISelectableItemCollection, int32)</signature>
                        <name>Select</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ISelectionStrategyContract</name>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(NeoComp.Optimization.GA.ISelectableItemCollection, int32)</signature>
                        <name>NeoComp.Optimization.GA.ISelectionStrategy.Select</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.ISuccessFactor</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_Dirtied</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparationMode()</signature>
                        <name>get_ComparationMode</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Container</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDirty</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_Dirtied</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ITerritory`2</name>
                <methodlist>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInitialized</name>
                    </method>
                    <method>
                        <signature>!1(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ITerritoryContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Core.ISynchronized.get_SyncRoot</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Optimization.GA.ISelectableItemCollection.get_Count</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>NeoComp.Optimization.GA.ISelectableItemCollection.Select</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.add_BestBodyArrived</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.get_IsInitialized</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1(int32)</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.get_Item</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.Remove</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedEventArgs`1&lt;!1&gt;&gt;)</signature>
                        <name>NeoComp.Optimization.GA.ITerritory&lt;TBodyPlan,TBody&gt;.remove_BestBodyArrived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TBody&gt;.GetEnumerator</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.MutationExtensions</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Core.IntRange)</signature>
                        <name>Crossover</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>Deletion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Core.IntRange)</signature>
                        <name>DoCrossover</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>DoDeletion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>DoDuplication</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>DoInversion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Core.IntRange)</signature>
                        <name>DoToChunks</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>Duplication</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.List`1&lt;!!0&gt;(NeoComp.Core.ObservableEnumerator`1&lt;!!0&gt;, int32)</signature>
                        <name>GetChunk</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>Insertion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>Inversion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Core.Probability, System.Func`2&lt;!!0,!!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Optimization.GA.NaturalMutationParameters)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, NeoComp.Core.IntRange)</signature>
                        <name>ToChunks</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;)</signature>
                        <name>ToSequence</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;, NeoComp.Core.Probability)</signature>
                        <name>Translocation</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;&gt;c__DisplayClass2d`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>&lt;Insertion&gt;b__2b</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>probability</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;&gt;c__DisplayClass32`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0(!0)</signature>
                        <name>&lt;Mutate&gt;b__30</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>pointMutationChance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>pointMutationMethod</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;DoCrossover&gt;d__34`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>s</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>&lt;&gt;3__crossoverChunkSize</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__otherSequence</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__sequence</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.ObservableEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;currentEnum&gt;5__37</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.ObservableEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;enum1&gt;5__35</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;enum1OnEnd&gt;5__3a</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.ObservableEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;enum2&gt;5__36</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;enum2OnEnd&gt;5__3b</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;enumIndexValidTo&gt;5__38</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;validCounter&gt;5__39</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>crossoverChunkSize</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>otherSequence</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>sequence</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;DoDeletion&gt;d__10`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally14</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally16</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;3__chunks</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;&gt;3__probability</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap13</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap15</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__11</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__12</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>chunks</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>probability</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;DoDuplication&gt;d__19`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1d</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1f</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;3__chunks</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;&gt;3__probability</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap1c</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap1e</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__1a</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__1b</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>chunks</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>probability</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;DoInversion&gt;d__22`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally26</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally28</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;3__chunks</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;&gt;3__probability</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap25</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap27</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__23</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__24</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>chunks</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>probability</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;DoToChunks&gt;d__0`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;T&gt;&gt;.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>&lt;&gt;3__chunkSize</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__sequence</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__4</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;current&gt;5__3</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.ObservableEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;enumerator&gt;5__1</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;nextChunkSize&gt;5__2</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>chunkSize</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>sequence</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.MutationExtensions/&lt;ToSequence&gt;d__7`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyb</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;3__chunks</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrapa</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrapc</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;chunk&gt;5__8</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;entiry&gt;5__9</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;&gt;</signature>
                        <name>chunks</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.NaturalBodyFactory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalMutationParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;()</signature>
                        <name>CreateInitialPlan</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;(NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;, NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;)</signature>
                        <name>Crossover</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxDNASize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.NaturalMutationParameters()</signature>
                        <name>get_MutationParameters</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;(NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;, bool)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>!0(!0)</signature>
                        <name>PointMutation</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalMutationParameters)</signature>
                        <name>set_MutationParameters</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.NaturalMutationParameters</signature>
                        <name>mutationParameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.NaturalBodyFactoryContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxDNASize</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.NaturalDNA</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>NeoComp.Optimization.GA.NaturalDNA`1&lt;!!0&gt;(NeoComp.Optimization.GA.NaturalDNA`1&lt;!!0&gt;, NeoComp.Optimization.GA.NaturalDNA`1&lt;!!0&gt;, NeoComp.Optimization.GA.NaturalMutationParameters)</signature>
                        <name>Crossover</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.NaturalDNA`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalDNA`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>get_Definition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!0&gt;()</signature>
                        <name>get_Genes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxSize</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalMutationParameters, System.Func`2&lt;!0,!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>set_Definition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MaxSize</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MaxSize&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>definition</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!0&gt;</signature>
                        <name>genes</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.NaturalMutationParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_CrossoverChunkSize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_DeletionMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_DuplicationMutationChance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasReorderMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_InsertionMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_InversionMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_MutationChunkSize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_PointMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_TranslocationMutationChance</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_CrossoverChunkSize</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_DeletionMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_DuplicationMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_InsertionMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_InversionMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_MutationChunkSize</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_PointMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_TranslocationMutationChance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>crossoverChunkSize</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>defaultChance</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>defaultRange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>deletionMutationChance</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>duplicationMutationChance</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>insertionMutationChance</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>inversionMutationChance</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>mutationChunkSize</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>pointMutationChance</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>translocationMutationChance</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ObjectPropertySuccessFactor`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISuccessFactor)</signature>
                        <name>AddHandler</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.PropertySuccessFactor`2&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor()</signature>
                        <name>get_LastKnownFactor</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>LastKnownValueChanged</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnFactorDirtied</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISuccessFactor)</signature>
                        <name>RemoveHandler</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISuccessFactor)</signature>
                        <name>set_LastKnownFactor</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor</signature>
                        <name>&lt;LastKnownFactor&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.ObjectSuccessFactor`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddFactorHandlers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Build</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;)</signature>
                        <name>DoCompareTo</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;[]()</signature>
                        <name>get_LastKnownFactors</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnFactorDirtied</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISuccessFactor[])</signature>
                        <name>RemoveFactorHandlers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;[])</signature>
                        <name>set_LastKnownFactors</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;[]</signature>
                        <name>&lt;LastKnownFactors&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.PlannedBody`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, !0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Plan</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>plan</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Population`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>add_BestBodyArrivedHelper</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.GroupCollection`2&lt;!0,!1&gt;()</signature>
                        <name>get_Groups</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;(int32)</signature>
                        <name>GetNearestGroup</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>GroupAdded</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, NeoComp.Optimization.GA.BestBodyArrivedEventArgs`2&lt;!0,!1&gt;)</signature>
                        <name>GroupOnBestBodyArrived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;)</signature>
                        <name>GroupRemoved</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.add_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.get_Groups</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.Initialize</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.GA.IPopulation.Step</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2&lt;!0,!1&gt;)</signature>
                        <name>OnBestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>remove_BestBodyArrived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;)</signature>
                        <name>remove_BestBodyArrivedHelper</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.GroupCollection`2&lt;!0,!1&gt;)</signature>
                        <name>set_Groups</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Step</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.GroupCollection`2&lt;!0,!1&gt;</signature>
                        <name>&lt;Groups&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2&lt;!0,!1&gt;&gt;</signature>
                        <name>BestBodyArrived</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs&gt;</signature>
                        <name>BestBodyArrivedHelper</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>chanceOfMigration</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClass7</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;NeoComp.Optimization.GA.Group`2&lt;!0,!1&gt;&gt;</signature>
                        <name>groups</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClass9</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;Step&gt;b__5</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1[]</signature>
                        <name>combinedBodies</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Threading.CancellationToken&gt;</signature>
                        <name>cToken</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClass7&lt;!0,!1&gt;</signature>
                        <name>CS$&lt;&gt;8__locals8</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TBodyPlan</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClassb</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;Step&gt;b__6</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.Population`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClass7&lt;!0,!1&gt;</signature>
                        <name>CS$&lt;&gt;8__locals8</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.Population`2/&lt;&gt;c__DisplayClass9&lt;!0,!1&gt;</signature>
                        <name>CS$&lt;&gt;8__localsa</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>migChance</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.PropertySuccessFactor`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;, NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddHandler</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.PropertySuccessFactor`2&lt;!0,!1&gt;)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;)</signature>
                        <name>DoCompareTo</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;()</signature>
                        <name>get_Accessor</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_LastKnownValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_LowerIsBetter</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NullIsBetter</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>LastKnownValueChanged</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>ReceiveWeakEvent</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;)</signature>
                        <name>set_Accessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>set_LastKnownValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_LowerIsBetter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_NullIsBetter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, object, System.EventArgs)</signature>
                        <name>System.Windows.IWeakEventListener.ReceiveWeakEvent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;</signature>
                        <name>&lt;Accessor&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;LastKnownValue&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;LowerIsBetter&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;NullIsBetter&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>generic</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.RandomSelectionStrategy</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(NeoComp.Optimization.GA.ISelectableItemCollection, int32)</signature>
                        <name>Select</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.RandomSelectionStrategy/&lt;Select&gt;d__0</name>
                <newname>NeoComp.Optimization.GA.RandomSelectionStrategy/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;object&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Object&gt;.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__count</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectableItemCollection</signature>
                        <name>&lt;&gt;3__orderedItems</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.RandomSelectionStrategy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;index&gt;5__3</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;item&gt;5__4</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;itemCount&gt;5__2</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;</signature>
                        <name>&lt;returned&gt;5__1</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectableItemCollection</signature>
                        <name>orderedItems</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SimpleBodyFactory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0(!0)</signature>
                        <name>&lt;Mutate&gt;b__8</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;()</signature>
                        <name>CreateInitialPlan</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;(NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;, NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;)</signature>
                        <name>Crossover</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_CrossoverChunkSize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;(NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;, bool)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_CrossoverChunkSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>crossoverChunkSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SimpleBodyFactoryContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGene</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TBody</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SimpleMutatorBodyFactory`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0(!0)</signature>
                        <name>DoPointMuation</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_PointMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;!0&gt;)</signature>
                        <name>Mutate</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_PointMutationChance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>pointMutationChance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SuccessFactor`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0, NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_Dirtied</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;)</signature>
                        <name>DoCompareTo</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparationMode()</signature>
                        <name>get_ComparationMode</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Container</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDirty</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>NeoComp.Optimization.GA.ISuccessFactor.get_Container</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnDirtied</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_Dirtied</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>set_ComparationMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Container</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDirty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ToDirty</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ComparationMode</signature>
                        <name>&lt;ComparationMode&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Container&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDirty&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>Dirtied</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ComparationMode()</signature>
                        <name>get_ComparationMode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Order</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ComparationMode)</signature>
                        <name>set_ComparationMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Order</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GA.ComparationMode</signature>
                        <name>&lt;ComparationMode&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Order&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorContainerAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorFactory</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!!0&gt;(!!0)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor(object)</signature>
                        <name>CreateFromObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NeoComp.Optimization.GA.ObjectSuccessFactor`1&lt;!!0&gt;(!!0)</signature>
                        <name>CreateInternal</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.List`1&lt;NeoComp.Optimization.GA.SuccessFactor`1&lt;!!0&gt;&gt;(!!0)</signature>
                        <name>GetFactors</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SuccessFactorFactory/&lt;&gt;c__DisplayClass1`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;(NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator)</signature>
                        <name>&lt;GetFactors&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>container</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorRegistry</name>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator(&lt;&gt;f__AnonymousType2`2&lt;&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;,System.Type&gt;)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__9</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Delegate(System.Type)</signature>
                        <name>CompileCreateFunc</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator[](System.Type)</signature>
                        <name>CreateSuccessFactorCreators</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Delegate(System.Type)</signature>
                        <name>GetCreateFunc</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator[](System.Type)</signature>
                        <name>GetCreators</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactorContainerAttribute(System.Type)</signature>
                        <name>GetSuccessFactorContainerAttribute</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsSuccessFactorContainer</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,NeoComp.Optimization.GA.SuccessFactorContainerAttribute&gt;</signature>
                        <name>containerDict</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,System.Delegate&gt;</signature>
                        <name>createFuncDict</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator[]&gt;</signature>
                        <name>creatorDict</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.PropertyInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.PropertyInfo,&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegateb</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatec</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType2`2&lt;&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;,System.Type&gt;,NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorRegistry/&lt;&gt;c__DisplayClassf</name>
                <newname>o/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType2`2&lt;&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;,System.Type&gt;(&lt;&gt;f__AnonymousType1`2&lt;System.Reflection.PropertyInfo,NeoComp.Optimization.GA.SuccessFactorAttribute&gt;)</signature>
                        <name>&lt;CreateSuccessFactorCreators&gt;b__8</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.SuccessFactorRegistry/ISuccessFactorCreator</name>
                <newname>o/b</newname>
                <methodlist>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor(object)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TContainer</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TProperty</name>
                </genericparameter>
                <name>NeoComp.Optimization.GA.SuccessFactorRegistry/SuccessFactorCreator`2</name>
                <newname>o/SuccessFactorCreator`2</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo, NeoComp.Optimization.GA.SuccessFactorAttribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;GetCollectionItemType&gt;b__13</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;(System.Type)</signature>
                        <name>&lt;GetCollectionItemType&gt;b__14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;)</signature>
                        <name>&lt;GetCollectionItemType&gt;b__15</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Type(&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;)</signature>
                        <name>&lt;GetCollectionItemType&gt;b__16</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`4&lt;!0,NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;,NeoComp.Optimization.GA.ComparationMode,NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;&gt;(System.Type, NeoComp.Core.IPropertyOrFieldAccessor, System.Type)</signature>
                        <name>Compile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;(!0)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>GetCollectionItemType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo)</signature>
                        <name>Initialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISuccessFactor(object)</signature>
                        <name>NeoComp.Optimization.GA.SuccessFactorRegistry.ISuccessFactorCreator.Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;</signature>
                        <name>accessor</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.SuccessFactorAttribute</signature>
                        <name>attribute</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`4&lt;!0,NeoComp.Core.PropertyOrFieldAccessor`2&lt;!0,!1&gt;,NeoComp.Optimization.GA.ComparationMode,NeoComp.Optimization.GA.SuccessFactor`1&lt;!0&gt;&gt;</signature>
                        <name>createFunc</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate17</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate18</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate19</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType3`2&lt;System.Type,System.Type&gt;,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1a</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.TournamentSelectionStrategy</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, NeoComp.Core.Probability)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_BestWinChance</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TournamentSize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(NeoComp.Optimization.GA.ISelectableItemCollection, int32)</signature>
                        <name>Select</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_BestWinChance</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_TournamentSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>bestWinChance</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>tournamentSize</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GA.TournamentSelectionStrategy/&lt;Select&gt;d__4</name>
                <newname>NeoComp.Optimization.GA.TournamentSelectionStrategy/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;object&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Object&gt;.GetEnumerator</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__count</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectableItemCollection</signature>
                        <name>&lt;&gt;3__orderedItems</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.TournamentSelectionStrategy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedDictionary`2&lt;int32,object&gt;</signature>
                        <name>&lt;arena&gt;5__7</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;baseProbability&gt;5__8</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;index&gt;5__b</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;itemCount&gt;5__5</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;p&gt;5__9</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;returnedCount&gt;5__a</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;tournamentSize&gt;5__6</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;winner&gt;5__d</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;winnerIndex&gt;5__c</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectableItemCollection</signature>
                        <name>orderedItems</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBody`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>NeoComp.Core.IInitializable.Initialize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>isInitialized</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkParameters</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBodyFactory`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(int32)</signature>
                        <name>&lt;CreateInitialGeneSequence&gt;b__c</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;float64&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>DoPointMuation</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_GeneCount</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Parameters</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Parameters&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,float64&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBodyFactoryContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_GeneCount</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkGroup`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBodyFactory`2&lt;!0,!1&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CheckIsValid</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.IAdjustable[]()</signature>
                        <name>get_AdjustableItems</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_MutationStrength</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.INetwork()</signature>
                        <name>get_Network</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IAdjustable[])</signature>
                        <name>set_AdjustableItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_MutationStrength</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.INetwork)</signature>
                        <name>set_Network</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.IAdjustable[]</signature>
                        <name>&lt;AdjustableItems&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>mutationStrength</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.INetwork</signature>
                        <name>network</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkPopulation`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBody</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>get_TestResult</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork)</signature>
                        <name>Setup</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBodyFactory</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBody`1&lt;NeoComp.Networks.Neural.NeuralNetwork&gt;(NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;)</signature>
                        <name>CreateBody</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_GeneCount</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkGroup</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBodyFactory, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulation</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulationFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulation(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulation(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest, NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBodyFactory&amp;)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulation(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest, NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBodyFactory&amp;)</signature>
                        <name>DoCreate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;NeoComp.Core.IntRange&gt;()</signature>
                        <name>get_CrossoverChunkSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_GroupCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_GroupSize</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_MutationStrength</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_PointMutationChance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy()</signature>
                        <name>get_SelectionStrategy</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_ChanceOfMigration</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;NeoComp.Core.IntRange&gt;)</signature>
                        <name>set_CrossoverChunkSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_GroupCount</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_GroupSize</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_MutationStrength</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_PointMutationChance</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.ISelectionStrategy)</signature>
                        <name>set_SelectionStrategy</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;ChanceOfMigration&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;NeoComp.Core.IntRange&gt;</signature>
                        <name>&lt;CrossoverChunkSize&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>&lt;PointMutationChance&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GA.ISelectionStrategy</signature>
                        <name>&lt;SelectionStrategy&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>groupCount</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>groupSize</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>mutationStrength</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkBody`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;, NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITestResult()</signature>
                        <name>get_TestResult</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ITestResult)</signature>
                        <name>set_TestResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Setup</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Test</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ITestResult</signature>
                        <name>&lt;TestResult&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkBodyContract`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Setup</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.AdjustedTestableNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.IComputationalNetworkTest()</signature>
                        <name>get_Test</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetworkTest)</signature>
                        <name>set_Test</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.IComputationalNetworkTest</signature>
                        <name>test</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredComputationalNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_InputInterfaceLength</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_OutputInterfaceLength</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_InputInterfaceLength</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_OutputInterfaceLength</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>inputInterfaceLength</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>outputInterfaceLength</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkBody</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;)</signature>
                        <name>CreateConnection</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicalNetwork()</signature>
                        <name>CreateNetworkInstance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;)</signature>
                        <name>CreateNode</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkBodyFactory</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicGateType(NeoComp.Networks.Logical.LogicGateType)</signature>
                        <name>CreateAnotherGeneData</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBody`2&lt;NeoComp.Networks.Logical.LogicGateType,NeoComp.Networks.Logical.LogicalNetwork&gt;(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;&gt;)</signature>
                        <name>CreateBody</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicGateType()</signature>
                        <name>CreateRandomGeneData</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkGroup</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkBodyFactory, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Logical.LogicGateType[]()</signature>
                        <name>get_AvailableGateArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.HashSet`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;()</signature>
                        <name>get_AvailableGates</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Logical.LogicGateType[])</signature>
                        <name>set_AvailableGateArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.HashSet`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;)</signature>
                        <name>set_AvailableGates</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Logical.LogicGateType[]</signature>
                        <name>&lt;AvailableGateArray&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;NeoComp.Networks.Logical.LogicGateType&gt;</signature>
                        <name>availableGates</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredLogicalNetworkPopulation</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBody`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;)</signature>
                        <name>CreateConnection</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>CreateNetwork</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>CreateNetworkInstance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;)</signature>
                        <name>CreateNode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ConnectionCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ConnectionCountFactor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFunctional</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NodeCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NodeCountFactor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PlanSizeCountFactor</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>InitializeNetworkInstance</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Threading.CancellationToken&gt;)</signature>
                        <name>NeoComp.Core.IInitializable.Initialize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ConnectionCount</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NodeCount</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>SetupWith</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ConnectionCount&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NodeCount&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>cachedNetwork</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isInitialized</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkParameters</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBodyContract`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;)</signature>
                        <name>CreateConnection</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>CreateNetworkInstance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;)</signature>
                        <name>CreateNode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBodyFactory`3</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, NeoComp.Optimization.GA.NaturalMutationParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectionIndex(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>CreateAnotherConnectionIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1(!1)</signature>
                        <name>CreateAnotherGeneData</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;&gt;()</signature>
                        <name>CreateInitialGeneSequence</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectionIndex()</signature>
                        <name>CreateRandomConnectionIndex</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>CreateRandomGeneData</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>CreateRandomNodeIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxDNASize</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;)</signature>
                        <name>PointMutation</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Parameters</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Parameters&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBodyFactory`3/&lt;CreateInitialGeneSequence&gt;d__2</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene&lt;TGeneData&gt;&gt;.GetEnumerator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene&lt;TGeneData&gt;&gt;.get_Current</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBodyFactory`3&lt;!0,!1,!2&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;count&gt;5__3</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;idx&gt;5__4</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TData</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex, !0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectionIndex()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NodeIndex</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectionIndex)</signature>
                        <name>set_Index</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>data</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.ConnectionIndex</signature>
                        <name>index</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TParameters</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGroup`3</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBodyFactory`3&lt;!0,!1,!2&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CheckIsValid</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CacheNetwork</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.IntRange()</signature>
                        <name>get_ConnectionCountRange</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_FeedForward</name>
                    </method>
                    <method>
                        <signature>NeoComp.Core.Probability()</signature>
                        <name>get_IndexMutationChance</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxConnectionIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CacheNetwork</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.IntRange)</signature>
                        <name>set_ConnectionCountRange</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_FeedForward</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Core.Probability)</signature>
                        <name>set_IndexMutationChance</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MaxConnectionIndex</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>cacheNetwork</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.IntRange</signature>
                        <name>connectionCountRange</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>feedForward</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Core.Probability</signature>
                        <name>indexMutationChance</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>maxConnectionIndex</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkPopulation`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData</name>
                <methodlist>
                    <method>
                        <signature>void(float64, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Bias</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Weight</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>bias</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>weight</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkBody</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Connection(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData&gt;)</signature>
                        <name>CreateConnection</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork()</signature>
                        <name>CreateNetworkInstance</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Node(NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData&gt;)</signature>
                        <name>CreateNode</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkBodyFactory</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64)</signature>
                        <name>CreateAnotherAdjustment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData(NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData)</signature>
                        <name>CreateAnotherGeneData</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkBody`2&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData,NeoComp.Networks.Neural.NeuralNetwork&gt;(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData&gt;&gt;)</signature>
                        <name>CreateBody</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>CreateRandomAdjustment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralGeneData()</signature>
                        <name>CreateRandomGeneData</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkGroup</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkBodyFactory, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.IActivationFunction()</signature>
                        <name>get_ActivationFunction</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.IActivationFunction)</signature>
                        <name>set_ActivationFunction</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Neural.IActivationFunction</signature>
                        <name>activationFunction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredNeuralNetworkPopulation</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TGeneData</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNetwork</name>
                </genericparameter>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredTestableNetworkBody`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, NeoComp.Optimization.GA.NaturalDNA`1&lt;NeoComp.Optimization.GeneticNetworks.ConfiguredNetworkGene`1&lt;!0&gt;&gt;, NeoComp.Optimization.GeneticNetworks.ConfiguredTestableNetworkParameters)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFunctional</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.ConfiguredTestableNetworkParameters()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ITestResult()</signature>
                        <name>get_TestResult</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Computations.ITestResult)</signature>
                        <name>set_TestResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>SetupWith</name>
                    </method>
                    <method>
                        <signature>void(!1)</signature>
                        <name>Test</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Computations.ITestResult</signature>
                        <name>&lt;TestResult&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.GeneticNetworks.ConfiguredTestableNetworkParameters</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_FunctionalErrorTreshold</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.IComputationalNetworkTest()</signature>
                        <name>get_Test</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_FunctionalErrorTreshold</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.IComputationalNetworkTest)</signature>
                        <name>set_Test</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>functionalErrorTreshold</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.IComputationalNetworkTest</signature>
                        <name>test</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.BackPropagationLearningEpoch</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.BackPropagationLearningStrategy, NeoComp.Networks.Neural.NeuralNetworkTest, bool)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.BackPropagationLearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, float64, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.IBackPropagationNeuron(NeoComp.Networks.ConnectedNode`2&lt;NeoComp.Optimization.Learning.IBackPropagationSynapse,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;)</signature>
                        <name>&lt;InitializeNewRun&gt;b__6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.IDeltaBasedAdjustable, float64)</signature>
                        <name>Adjust</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;float64&gt;)</signature>
                        <name>BackPropagate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BackPropagateErrors</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectedNode`2&lt;NeoComp.Optimization.Learning.IBackPropagationSynapse,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;)</signature>
                        <name>BackPropagateErrors</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNode`2&lt;NeoComp.Optimization.Learning.IBackPropagationSynapse,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;[]()</signature>
                        <name>get_ConnectedNeuronArray</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_LearningRate</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Momentum</name>
                    </method>
                    <method>
                        <signature>System.InvalidOperationException()</signature>
                        <name>GetInvalidNumberOfErrorsEx</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;float64&gt;, int32)</signature>
                        <name>NeoComp.Optimization.Learning.IOnlineLearningStrategy.Adjust</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_LearningRate</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Momentum</name>
                    </method>
                    <method>
                        <signature>void(int32, float64)</signature>
                        <name>SetErrorsToOutputConnections</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateAdjustments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectedNode`2&lt;NeoComp.Optimization.Learning.IBackPropagationSynapse,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;)</signature>
                        <name>UpdateAdjustments</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.ConnectedNode`2&lt;NeoComp.Optimization.Learning.IBackPropagationSynapse,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;,NeoComp.Optimization.Learning.IBackPropagationNeuron&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>initToIndex</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Neural.IDerivatableActivationFunction</signature>
                        <name>lastAC</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>learningRate</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>momentum</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.BackPropagationNeuron</name>
                <methodlist>
                    <method>
                        <signature>void(float64, NeoComp.Networks.Neural.IDerivatableActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.IDerivatableActivationFunction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.IDerivatableActivationFunction()</signature>
                        <name>get_ActivationFunction</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Delta</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.IBackPropagationNeuron.get_Error</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IBackPropagationNeuron.set_Error</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.IDeltaBasedAdjustable.get_Delta</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IDeltaBasedAdjustable.set_Delta</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Delta</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Error</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Delta&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.BackPropagationSynapse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Delta</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.IBackPropagationSynapse.get_Error</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IBackPropagationSynapse.set_Error</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.IDeltaBasedAdjustable.get_Delta</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IDeltaBasedAdjustable.set_Delta</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Delta</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Error</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Delta&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.GALearningEpoch</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest, NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulationFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.GALearningStrategy, NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.GALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulationFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddBestHandler</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoInitNewRun</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulationFactory()</signature>
                        <name>get_PopulationFactory</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>NeoComp.Optimization.Learning.IParallelLearningStrategy.DoIteration</name>
                    </method>
                    <method>
                        <signature>void(object, NeoComp.Optimization.GA.BestBodyArrivedToGroupEventArgs`2&lt;NeoComp.Optimization.GA.DNASequence`1&lt;float64&gt;,NeoComp.Optimization.GeneticNetworks.AdjustedNetworkBody`1&lt;NeoComp.Networks.Neural.NeuralNetwork&gt;&gt;)</signature>
                        <name>OnBestBodyArrived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveBestHandler</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>Step</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBody</signature>
                        <name>bestBody</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkBodyFactory</signature>
                        <name>bodyFactory</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulation</signature>
                        <name>population</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.GeneticNetworks.AdjustedNeuralNetworkPopulationFactory</signature>
                        <name>populationFactory</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>populationInitialized</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IBackPropagationNeuron</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Networks.Neural.IDerivatableActivationFunction()</signature>
                        <name>get_ActivationFunction</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Error</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IBackPropagationSynapse</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Error</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IBatchLearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>Adjust</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IBatchLearningStrategyContract</name>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>NeoComp.Optimization.Learning.IBatchLearningStrategy.Adjust</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IDeltaBasedAdjustable</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Delta</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Delta</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IOnlineLearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;float64&gt;, int32)</signature>
                        <name>Adjust</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IOnlineLearningStrategyContract</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;float64&gt;, int32)</signature>
                        <name>NeoComp.Optimization.Learning.IOnlineLearningStrategy.Adjust</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IParallelLearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>DoIteration</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IParallelLearningStrategyContract</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>NeoComp.Optimization.Learning.IParallelLearningStrategy.DoIteration</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IQSALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Strength</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Strength</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IQSALearningStrategyContract</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.IQSALearningStrategy.get_Strength</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IQSALearningStrategy.set_Strength</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(float64)</signature>
                        <name>Punishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>Reward</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategyContract</name>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategy.Punishment</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategy.Reward</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpoch</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningMode()</signature>
                        <name>get_LearningMode</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MonteCarloSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PreserveTestOrder</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MonteCarloSize</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpochContract</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningMode()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpoch.get_LearningMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpoch.get_MonteCarloSize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpoch.get_PreserveTestOrder</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedAdjusterLearningEpoch.set_MonteCarloSize</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch</name>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Iteration</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork()</signature>
                        <name>get_Network</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningStrategy()</signature>
                        <name>get_Strategy</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest()</signature>
                        <name>get_Test</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>set_Test</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>Step</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedLearningEpochContract</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.get_Iteration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.get_Network</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningStrategy()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.get_Strategy</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.get_Test</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.Initialize</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.Reset</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.set_Test</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.Step</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>float64()</signature>
                        <name>get_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_LearningReward</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_RuttingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_LearningReward</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_RuttingPunishment</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategyContract</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.get_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.get_LearningReward</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.get_RuttingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.set_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.set_LearningReward</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedQSALearningStrategy.set_RuttingPunishment</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.LearningMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.Learning.LearningMode</signature>
                        <name>Batch</name>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.Learning.LearningMode</signature>
                        <name>Online</name>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.Learning.LearningMode</signature>
                        <name>Parallel</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.LearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork()</signature>
                        <name>get_Network</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork)</signature>
                        <name>set_Network</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork</signature>
                        <name>&lt;Network&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ParallelQSACompetitor</name>
                <newname>v</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;NeoComp.Networks.IAdjustable&gt;, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.ParallelQSAItem(NeoComp.Networks.IAdjustable)</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AdjustItems</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>get_LastResult</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumStabilizerAlgorithm()</signature>
                        <name>get_QSA</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTestResult)</signature>
                        <name>set_LastResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.QuantumStabilizerAlgorithm)</signature>
                        <name>set_QSA</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult</signature>
                        <name>&lt;LastResult&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.QSA.QuantumStabilizerAlgorithm</signature>
                        <name>&lt;QSA&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.IAdjustable,NeoComp.Optimization.Learning.ParallelQSAItem&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.Learning.ParallelQSAItem[]</signature>
                        <name>items</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ParallelQSAItem</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.IAdjustable)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AdjustItem</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState()</signature>
                        <name>NeoComp.Optimization.QSA.IQuantumStatedItem.get_State</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>NeoComp.Optimization.QSA.IQuantumStatedItem.set_State</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.IAdjustable</signature>
                        <name>item</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.QSA.QuantumState</signature>
                        <name>state</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ParallelSupervisedQSALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, float64, float64, float64, float64, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>Competition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateCompetitors</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CompetitorCount</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_LearningReward</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_RuttingPunishment</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>NeoComp.Optimization.Learning.IParallelLearningStrategy.DoIteration</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.ParallelQSACompetitor, float64)</signature>
                        <name>Punishment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetCompetitors</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.ParallelQSACompetitor, float64)</signature>
                        <name>Reward</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CompetitorCount</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_LearningReward</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_RuttingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetupCompetitorItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>Step</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult(NeoComp.Optimization.Learning.ParallelQSACompetitor, NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>Test</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>competitorCount</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;NeoComp.Optimization.Learning.ParallelQSACompetitor&gt;</signature>
                        <name>competitors</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>forgettingPunishment</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>learningReward</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>ruttingPunishment</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>starting</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>strength</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.ParallelSupervisedQSALearningStrategy/&lt;&gt;c__DisplayClasse</name>
                <newname>NeoComp.Optimization.Learning.ParallelSupervisedQSALearningStrategy/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.ParallelQSACompetitor, System.Threading.ParallelLoopState)</signature>
                        <name>&lt;Competition&gt;b__d</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.Learning.ParallelSupervisedQSALearningStrategy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest</signature>
                        <name>test</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.QSAItem</name>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.IAdjustable)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState()</signature>
                        <name>NeoComp.Optimization.QSA.IQuantumStatedItem.get_State</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>NeoComp.Optimization.QSA.IQuantumStatedItem.set_State</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.IAdjustable</signature>
                        <name>item</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.QSALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.QSAItem(NeoComp.Networks.IAdjustable)</signature>
                        <name>&lt;CreateQSA&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateQSA</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategy.Punishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>NeoComp.Optimization.Learning.IReinforcementLearningStrategy.Reward</name>
                    </method>
                    <method>
                        <signature>void(float64, bool)</signature>
                        <name>Punishment</name>
                    </method>
                    <method>
                        <signature>void(float64, bool)</signature>
                        <name>Reward</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetupItems</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.IAdjustable,NeoComp.Optimization.Learning.QSAItem&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.QSA.QuantumStabilizerAlgorithm</signature>
                        <name>qsa</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>strength</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TSynapse</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TNeuron</name>
                </genericparameter>
                <name>NeoComp.Optimization.Learning.SpecializedLearningStrategy`2</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;()</signature>
                        <name>get_ConnectedNeurons</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;)</signature>
                        <name>set_ConnectedNeurons</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Networks.ConnectedNodeCollection`2&lt;!0,!1&gt;</signature>
                        <name>&lt;ConnectedNeurons&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.Learning.SupervisedAdjusterLearningEpoch`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0, NeoComp.Optimization.Learning.LearningMode, NeoComp.Networks.Neural.NeuralNetworkTest, System.Nullable`1&lt;int32&gt;, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;(NeoComp.Networks.Neural.NeuralNetworkTestResult)</signature>
                        <name>&lt;GetOnlineResult&gt;b__10</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType5`2&lt;System.Guid,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;(NeoComp.Networks.Neural.NeuralNetworkTestResult, NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;)</signature>
                        <name>&lt;GetOnlineResult&gt;b__11</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(&lt;&gt;f__AnonymousType5`2&lt;System.Guid,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;)</signature>
                        <name>&lt;GetOnlineResult&gt;b__12</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;(&lt;&gt;f__AnonymousType5`2&lt;System.Guid,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;)</signature>
                        <name>&lt;GetOnlineResult&gt;b__13</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;(NeoComp.Networks.Neural.NeuralNetworkTestResult)</signature>
                        <name>&lt;GetOnlineResult&gt;b__14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;(NeoComp.Networks.Neural.NeuralNetworkTestResult, NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;)</signature>
                        <name>&lt;GetOnlineResult&gt;b__15</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;(NeoComp.Networks.Neural.NeuralNetworkTest, int32)</signature>
                        <name>&lt;InitializeTest&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Guid(&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;)</signature>
                        <name>&lt;InitializeTest&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;)</signature>
                        <name>&lt;InitializeTest&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>DoStep</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningMode()</signature>
                        <name>get_LearningMode</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MonteCarloSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PreserveTestOrder</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest()</signature>
                        <name>get_Test</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>GetBatchResult</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>GetOnlineResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>GetParallelResult</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeTest</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.LearningMode)</signature>
                        <name>set_LearningMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MonteCarloSize</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PreserveTestOrder</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>set_Test</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NeoComp.Optimization.Learning.LearningMode</signature>
                        <name>&lt;LearningMode&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PreserveTestOrder&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Neural.NeuralNetworkTestResult,System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate16</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;NeoComp.Networks.Neural.NeuralNetworkTestResult,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;,&lt;&gt;f__AnonymousType5`2&lt;System.Guid,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate17</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType5`2&lt;System.Guid,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate19</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Networks.Neural.NeuralNetworkTestResult,System.Collections.Generic.IEnumerable`1&lt;NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1a</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;NeoComp.Networks.Neural.NeuralNetworkTestResult,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;,NeoComp.Computations.ComputationTestResultEntry`2&lt;float64,System.Nullable`1&lt;float64&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1b</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;NeoComp.Networks.Neural.NeuralNetworkTest,int32,&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;,System.Guid&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType4`2&lt;System.Guid,int32&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>monteCarloSize</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest</signature>
                        <name>test</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Guid,int32&gt;</signature>
                        <name>testOrder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest[]</signature>
                        <name>tests</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.Learning.SupervisedLearningEpoch`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoReset</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>DoStep</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureStrategyInitialization</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Iteration</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetwork()</signature>
                        <name>get_Network</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Strategy</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTest()</signature>
                        <name>get_Test</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>IncIteration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.Learning.LearningStrategy()</signature>
                        <name>NeoComp.Optimization.Learning.ISupervisedLearningEpoch.get_Strategy</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Strategy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetworkTest)</signature>
                        <name>set_Test</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>Step</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Strategy&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>iteration</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>strategyIsInitialized</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>NeoComp.Optimization.Learning.SupervisedLearningEpochContract`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Networks.Neural.NeuralNetworkTestResult()</signature>
                        <name>DoStep</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.SupervisedQSALearningEpoch</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, NeoComp.Networks.Neural.NeuralNetworkTest, System.Nullable`1&lt;int32&gt;, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.Learning.SupervisedQSALearningStrategy, NeoComp.Networks.Neural.NeuralNetworkTest, System.Nullable`1&lt;int32&gt;, bool)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.Learning.SupervisedQSALearningStrategy</name>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Networks.Neural.NeuralNetwork, float64, float64, float64, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>Adjust</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_LearningReward</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_RuttingPunishment</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeNewRun</name>
                    </method>
                    <method>
                        <signature>void(float64, System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;float64&gt;&gt;)</signature>
                        <name>NeoComp.Optimization.Learning.IBatchLearningStrategy.Adjust</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_ForgettingPunishment</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_LearningReward</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_RuttingPunishment</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>forgettingPunishment</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>learningReward</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>prevMSE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>ruttingPunishment</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.QSA.IQuantumStatedItem</name>
                <methodlist>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>set_State</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>NeoComp.Optimization.QSA.ItemStabilizer</name>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.IQuantumStatedItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64, float64)</signature>
                        <name>Dissolve</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>float64(float64, float64)</signature>
                        <name>Follow</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(float64, float64)</signature>
                        <name>Grow</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ObjectInvariant</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Setup</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64, float64)</signature>
                        <name>Shrink</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(float64, float64)</signature>
                        <name>Stabilize</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>average</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>distance</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.QSA.IQuantumStatedItem</signature>
                        <name>item</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.QSA.QuantumStabilizerAlgorithm</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;NeoComp.Optimization.QSA.IQuantumStatedItem&gt;, float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.ItemStabilizer(NeoComp.Optimization.QSA.IQuantumStatedItem)</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64, bool)</signature>
                        <name>Dissolve</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Strength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetupItems</name>
                    </method>
                    <method>
                        <signature>void(float64, bool)</signature>
                        <name>Stabilize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;NeoComp.Optimization.QSA.IQuantumStatedItem,NeoComp.Optimization.QSA.ItemStabilizer&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>NeoComp.Optimization.QSA.ItemStabilizer[]</signature>
                        <name>items</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>strength</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>NeoComp.Optimization.QSA.QuantumState</name>
                <methodlist>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_GreaterThan</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_GreaterThanOrEqual</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>float64(NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState(bool)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState(float64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_LessThan</name>
                    </method>
                    <method>
                        <signature>bool(NeoComp.Optimization.QSA.QuantumState, NeoComp.Optimization.QSA.QuantumState)</signature>
                        <name>op_LessThanOrEqual</name>
                    </method>
                    <method>
                        <signature>NeoComp.Optimization.QSA.QuantumState()</signature>
                        <name>Random</name>
                    </method>
                    <method>
                        <signature>float64(float64, float64)</signature>
                        <name>ToRange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>System.Diagnostics.Contracts.__ContractsRuntime</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void(bool, string, string)</signature>
                        <name>Assert</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(bool, string, string)</signature>
                        <name>Assume</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(System.Diagnostics.Contracts.ContractFailureKind, string, string, System.Exception)</signature>
                        <name>RaiseContractFailedEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.Contracts.ContractFailureKind, string, string, System.Exception)</signature>
                        <name>ReportFailure</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool, string, string)</signature>
                        <name>Requires</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.Contracts.ContractFailureKind, string, string, string, System.Exception)</signature>
                        <name>TriggerFailure</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>insideContractEvaluation</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>System.Diagnostics.Contracts.__ContractsRuntime/ContractException</name>
                <newname>r/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Diagnostics.Contracts.ContractFailureKind, string, string, string, System.Exception)</signature>
                        <name>.ctor$PST06000781</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_Condition</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.ContractFailureKind</signature>
                        <name>_Kind</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_UserMessage</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>System.Diagnostics.Contracts.RuntimeContractsAttribute</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Diagnostics.Contracts.RuntimeContractsFlags)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>System.Diagnostics.Contracts.RuntimeContractsFlags</name>
                <newname>w</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>Asserts</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>Assumes</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>Ensures</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>Invariants</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>LegacyRequires</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>Requires</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>RequiresWithException</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Contracts.RuntimeContractsFlags</signature>
                        <name>ThrowOnFailure</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ThirdParty.MersenneTwister</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64(float64, float64)</signature>
                        <name>compute53BitRandom</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GenerateUInt32</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32[])</signature>
                        <name>init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Next</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>Next</name>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>Next</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>NextBytes</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NextDouble</name>
                    </method>
                    <method>
                        <signature>float64(bool)</signature>
                        <name>NextDouble</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>NextDoublePositive</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>NextSingle</name>
                    </method>
                    <method>
                        <signature>float32(bool)</signature>
                        <name>NextSingle</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>NextSinglePositive</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>NextUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>NextUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int32)</signature>
                        <name>NextUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>temperingShiftL</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>temperingShiftS</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>temperingShiftT</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>temperingShiftU</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_mag01</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_mt</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int16</signature>
                        <name>_mti</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>FiftyThreeBitsOf1s</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>Inverse53BitsOf1s</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>InverseOnePlus53BitsOf1s</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>LowerMask</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>M</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>MatrixA</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>N</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>OnePlus53BitsOf1s</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>TemperingMaskB</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>TemperingMaskC</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>UpperMask</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>327</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>1921</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>562</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>37</statistic>
            <statistic>11.31 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>559</statistic>
            <statistic>29.10 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>545</statistic>
            <statistic>96.98 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>282</statistic>
            <statistic>14.68 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>113</statistic>
            <statistic>5.88 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>47</statistic>
            <statistic>2.45 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>14</statistic>
            <statistic>0.73 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'l'</description>
            <statistic>10</statistic>
            <statistic>0.52 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'm'</description>
            <statistic>10</statistic>
            <statistic>0.52 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'n'</description>
            <statistic>10</statistic>
            <statistic>0.52 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>